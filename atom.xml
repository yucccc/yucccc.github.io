<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宇cccc</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yucccc.com/"/>
  <updated>2017-06-06T13:21:53.000Z</updated>
  <id>http://yucccc.com/</id>
  
  <author>
    <name>宇cccc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue2监听微信返回按钮仿微信切换动画</title>
    <link href="http://yucccc.com/2017/06/06/vue2%E7%9B%91%E5%90%AC%E5%BE%AE%E4%BF%A1%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE%E4%BB%BF%E5%BE%AE%E4%BF%A1%E5%88%87%E6%8D%A2%E5%8A%A8%E7%94%BB/"/>
    <id>http://yucccc.com/2017/06/06/vue2监听微信返回按钮仿微信切换动画/</id>
    <published>2017-06-06T13:09:49.000Z</published>
    <updated>2017-06-06T13:21:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>效果如下<br><img src="http://upload-images.jianshu.io/upload_images/4378038-661a910ced34d96c.gif?imageMogr2/auto-orient/strip" alt="GIF.gif"><br>点击了浏览器默认返回按钮执行后退动画 其他执行前进动画 这里录制的时候没有录制到鼠标轨迹<br>大致思路如下:<br>在vue中实现动画其实是很简单的,但是由于网上查找不到相关的浏览器默认返回按钮或者微信的返回按钮事件，所有只能是一个伪的监测返回事件<br>代码如下：</p>
<ul>
<li><p>首先是先定义css动画  感谢vux的源码 我是一顿复制粘贴<br>app.vue 文件</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.vux-pop-out-enter</span> &#123;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-100%, 0, 0);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.vux-pop-out-leave-active</span> &#123;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(100%, 0, 0);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.vux-pop-in-enter</span> &#123;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(100%, 0, 0);</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(100%, 0, 0);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.vux-pop-in-leave-active</span> &#123;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-100%, 0, 0);</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(-100%, 0, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义动画执行组件   此处的name应该是动态改变的<br>app.vue 文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:name</span>=<span class="string">"'vux-pop-'+ animate"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">"router-view"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>定义name的值  那么此时我们需要用到vuex  如果你用其他也可以 个人习惯用vuex<br>main.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;&#125;);<span class="comment">//也许这里你已经有其他vuex模块</span></div><div class="line">store.registerModule(<span class="string">'vux'</span>, &#123; <span class="comment">// 名字自己定义</span></div><div class="line">  state: &#123;</div><div class="line">    <span class="attr">animate</span>: <span class="string">'in'</span>,      <span class="comment">// 动画状态  默认是进入</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">mutations</span>: &#123;   <span class="comment">// 提交状态</span></div><div class="line">    animateChange(state, payload)&#123;</div><div class="line">      state.animate = payload.animate</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>重点来了 改变animate的状态  我们需要监测路由的状态<br>main.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> routerArr = [];<span class="comment">//  创建一个存储路由数组</span></div><div class="line">router.beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params">to, from, next</span>) </span>&#123;</div><div class="line">  routerArr.push(to.path);<span class="comment">//每次push路由</span></div><div class="line">  <span class="keyword">if</span> (routerArr[routerArr.length - <span class="number">3</span>] === to.path) &#123;<span class="comment">// 当如果要去的路径等于数组的倒数第二个路由 那么就是点        击了后退</span></div><div class="line">    store.commit(<span class="string">'animateChange'</span>, &#123;</div><div class="line">      <span class="attr">animate</span>: <span class="string">'out'</span> <span class="comment">// 变成后退动画</span></div><div class="line">    &#125;);</div><div class="line">    routerArr.splice(routerArr.length - <span class="number">2</span>, <span class="number">2</span>) <span class="comment">// 必须删除数组的倒数两位字符串</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    store.commit(<span class="string">'animateChange'</span>, &#123;</div><div class="line">      <span class="attr">animate</span>: <span class="string">'in'</span> <span class="comment">// 变成前进动画</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这么做的话就可以实现切换的效果了  但是存在刷新数组被情况的情况 改成存在sessionStorage 里面就可以</p>
<ul>
<li>最后拿到 animate 状态<br>app.vue 文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line">  computed: &#123;</div><div class="line">    ...mapState(&#123;</div><div class="line">      <span class="attr">animate</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.vux.animate <span class="comment">// 拿到状态</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>也许有更好的解决办法 目前只能这么实现了<br>项目地址  <a href="https://github.com/yucccc/vue-vote" target="_blank" rel="external">https://github.com/yucccc/vue-vote</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;效果如下&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4378038-661a910ced34d96c.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;GIF.gif&quot;&gt;
    
    </summary>
    
      <category term="vue2" scheme="http://yucccc.com/categories/vue2/"/>
    
    
      <category term="vue2" scheme="http://yucccc.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>vue2微信分享坑点</title>
    <link href="http://yucccc.com/2017/06/06/vue2%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%9D%91%E7%82%B9/"/>
    <id>http://yucccc.com/2017/06/06/vue2实现微信分享坑点/</id>
    <published>2017-06-06T13:09:49.000Z</published>
    <updated>2017-06-06T13:16:38.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>现在我的需求是在首页或者详情页点击分享 成功之后会请求后端接口 如果符合条件 则会得到一张</li>
<li>首先 肯定是先撸一波文档  <a href="https://mp.weixin.qq.com/wiki" target="_blank" rel="external">微信api接口文档</a><br>微信分享其实很简单 步骤如下</li>
<li><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4>先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。这个不多说，见文档，只有绑定了才能进行下一步的动作</li>
<li><h4 id="引入js文件"><a href="#引入js文件" class="headerlink" title="引入js文件"></a>引入js文件</h4><p>此处我用的是vux内置的插件 其他方式正常引入script即可</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; WechatPlugin&#125; <span class="keyword">from</span> <span class="string">'vux'</span></div><div class="line">Vue.use(WechatPlugin); <span class="comment">//  微信</span></div><div class="line"><span class="keyword">const</span> wx = Vue.wechat;</div></pre></td></tr></table></figure>
</li>
<li><h4 id="通过config接口注入权限验证配置"><a href="#通过config接口注入权限验证配置" class="headerlink" title="通过config接口注入权限验证配置"></a>通过config接口注入权限验证配置</h4><p>所有需要使用JS-SDK的页面必须先注入配置信息  配置信息需要后端返回</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此处我是定义在vue原型中 这样方便以后的调用 通过 this.wxShare()调用</span></div><div class="line"><span class="keyword">const</span> imgUrl = <span class="string">'http://xxx.xxxx.xxxx'</span>; <span class="comment">// 测试地址</span></div><div class="line">Vue.prototype.wxShare = <span class="function"><span class="keyword">function</span> (<span class="params">title, desc, link</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = <span class="built_in">document</span>.location.href;<span class="comment">// 当前url</span></div><div class="line">  http.get(getConfig(), &#123;<span class="comment">//请求配置</span></div><div class="line">    params: &#123;</div><div class="line">      <span class="attr">url</span>: url</div><div class="line">    &#125;</div><div class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;<span class="comment">// 获得签名配置</span></div><div class="line">    <span class="keyword">var</span> Data = res.data.data;</div><div class="line">    <span class="comment">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作</span></div><div class="line">    wx.config(&#123;</div><div class="line">      <span class="attr">debug</span>: <span class="literal">false</span>, <span class="comment">// 开启调试模式,开发时可以开启</span></div><div class="line">      appId: Data.appid,   <span class="comment">// 必填，公众号的唯一标识   由接口返回</span></div><div class="line">      timestamp: Data.timestamp, <span class="comment">// 必填，生成签名的时间戳 由接口返回</span></div><div class="line">      nonceStr: Data.nonceStr,    <span class="comment">// 必填，生成签名的随机串 由接口返回</span></div><div class="line">      signature: Data.signature,   <span class="comment">// 必填，签名 由接口返回</span></div><div class="line">      jsApiList: [<span class="string">'onMenuShareAppMessage'</span>, <span class="string">'onMenuShareTimeline'</span>] <span class="comment">// 此处填你所用到的方法</span></div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">wx.ready(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</div><div class="line"><span class="comment">// ..... code</span></div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><h4 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">Vue.prototype.wxShare = <span class="function"><span class="keyword">function</span> (<span class="params">title, desc, link</span>) </span>&#123;</div><div class="line">wx.config()</div><div class="line">wx.ready(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，</span></div><div class="line">    <span class="comment">// 则可以直接调用，不需要放在ready函数中。</span></div><div class="line">    wx.onMenuShareAppMessage(&#123; <span class="comment">// 分享给朋友</span></div><div class="line">      title: title,       <span class="comment">// 分享标题</span></div><div class="line">      desc: desc,   <span class="comment">// 分享描述</span></div><div class="line">      link: link,       <span class="comment">// 分享链接 默认以当前链接</span></div><div class="line">      imgUrl: imgUrl + <span class="string">'/static/images/share.png'</span>,<span class="comment">// 分享图标</span></div><div class="line">      <span class="comment">// 用户确认分享后执行的回调函数</span></div><div class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> params = <span class="keyword">new</span> URLSearchParams();</div><div class="line">        params.append(<span class="string">'token'</span>, <span class="built_in">window</span>.localStorage.getItem(<span class="string">'token'</span>));</div><div class="line">        params.append(<span class="string">'type'</span>, <span class="string">'share'</span>);</div><div class="line">        http.post(shareCallback(), params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">// 请求后端分享成功之后获取一票的接口</span></div><div class="line">          <span class="keyword">if</span> (res.data.error == <span class="number">0</span>) &#123; <span class="comment">// 表示当天分享成功</span></div><div class="line">            store.commit(<span class="string">'shareChange'</span>, &#123;<span class="comment">// vuex弹出分享成功获取一票</span></div><div class="line">              isShare: <span class="literal">true</span></div><div class="line">            &#125;);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;,</div><div class="line">      <span class="comment">// 用户取消分享后执行的回调函数</span></div><div class="line">      cancel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'分享到朋友取消'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//分享到朋友圈</span></div><div class="line">    wx.onMenuShareTimeline(&#123;&#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后在需要的钩子里面调用即可,以上的流程都可以在文档中查看</p>
<ul>
<li><h4 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h4><ul>
<li><h5 id="在ios微信浏览器中-window-onload-reload-以及-window-location-go-0-无效"><a href="#在ios微信浏览器中-window-onload-reload-以及-window-location-go-0-无效" class="headerlink" title="在ios微信浏览器中 window.onload.reload() 以及  window.location.go(0) 无效"></a>在ios微信浏览器中 window.onload.reload() 以及  window.location.go(0) 无效</h5><p>我想实现登陆之后刷新页面, 结果在登陆之后 ios并不会刷新页面<br>解决办法： 最后使用 watch 解决</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  <span class="attr">login</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.login) &#123;</div><div class="line">      <span class="keyword">this</span>._getFansCard()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><h4 id="ios上二次分享会出现签名错误-并且莫名被拼接上了一串标识-此问题只有在ios上有"><a href="#ios上二次分享会出现签名错误-并且莫名被拼接上了一串标识-此问题只有在ios上有" class="headerlink" title="ios上二次分享会出现签名错误, 并且莫名被拼接上了一串标识 此问题只有在ios上有"></a>ios上二次分享会出现签名错误, 并且莫名被拼接上了一串标识 此问题只有在ios上有</h4></li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4378038-a9a93df0d7393185.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信截图_20170524110236.png"></p>
<p>ios会在#号中间添加一串标识 如下<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://test.aaa.bbbb.com/?from=singlemessage&amp;isappinstalled=0#/details?id=2</div><div class="line">// 原本链接 http://test.aaa.bbbb.com/#/details?id=2</div></pre></td></tr></table></figure></p>
<p>这个问题解决了两天,建议在一开始就开启debug模式,这样能及时知道问题所在<br>解决办法:<br>一开始以为是 ‘#’ 的问题 于是乎开启vue HTML5 History 模式  去除掉#  结果发现 在进入其他页面的时候 复制连接还是首页的链接 本质上还是没得到解决<br>后来发现本质上的错误是;当浏览者从分享窗口进入后，他从分享页按着正常路由跳转到其他页面，其他页面的逻辑中如果有需要获取当前页面url的需要，会发现这个url和正常路由跳转的不一样,导致签名不一致,所以获取不到正确的文案。<br>最后我是隔天再次测试就好了,最终我也不知道是到底如何解决的。。。。<br>一开始 有 #  然后开启 h5模式 最后又还原了 哈希模式  发现二次分享的问题解决了。。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;现在我的需求是在首页或者详情页点击分享 成功之后会请求后端接口 如果符合条件 则会得到一张&lt;/li&gt;
&lt;li&gt;首先 肯定是先撸一波文档  &lt;a href=&quot;https://mp.weixin.qq.com/wiki&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
      <category term="vue2" scheme="http://yucccc.com/categories/vue2/"/>
    
    
      <category term="vue2" scheme="http://yucccc.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>vue2动态给微信单页应用更改标题</title>
    <link href="http://yucccc.com/2017/04/30/vue2%E5%8A%A8%E6%80%81%E7%BB%99%E5%BE%AE%E4%BF%A1%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E6%9B%B4%E6%94%B9%E6%A0%87%E9%A2%98/"/>
    <id>http://yucccc.com/2017/04/30/vue2动态给微信单页应用更改标题/</id>
    <published>2017-04-30T07:40:28.000Z</published>
    <updated>2017-04-30T08:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在公司项目的重构,用到的是vue2.0,做的是一个微信m站,但是由于是SPA单页应用,所以就没有所谓的页面 都是router的跳转<br>而网页的标题 随着路由的改变而改变 也就成了一个(伪)需求</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在iOS的微信中 一个SPA应用 想要改变微信顶部导航栏的标题 使用document.title = xxx来改变网页标题是无效的<br>原因大致就是因为在微信中webview只加载网页标题一次 动态改变是无效的 除非都以新页面打开</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在网上查阅的资料都是说vue1的解决方法,并没有一个vue2的相关解决方法,因为2中的router与1发生变化,那么哪些解决方法也就不适用了,下面是本人使用的vue2的解决办法<br><strong>代码如下</strong></p>
<ul>
<li><p>先创建一个方法 这里我是放在utils文件夹中起名为setWechatTitle.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by yccc on 2017/4/30.</div><div class="line"> */</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.title = title;</div><div class="line">  <span class="keyword">let</span> ua = navigator.userAgent;</div><div class="line">  <span class="keyword">if</span> (<span class="regexp">/\bMicroMessenger\/([\d\.]+)/</span>.test(ua) &amp;&amp; <span class="regexp">/ip(hone|od|ad)/i</span>.test(ua)) &#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">    i.src = <span class="string">'/favicon.ico'</span>;</div><div class="line">    i.style.display = <span class="string">'none'</span>;</div><div class="line">    i.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        i.remove();</div><div class="line">      &#125;, <span class="number">9</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(i);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>main.js</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> setWechatTitle <span class="keyword">from</span> <span class="string">'./utils/setWechatTitle.js'</span> <span class="comment">// 导入方法</span></div><div class="line"> <span class="comment">//.....some code </span></div><div class="line"> <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span> <span class="comment">// 导入的路由</span></div><div class="line"></div><div class="line"> <span class="keyword">new</span> Vue(&#123; <span class="comment">// vue实例  </span></div><div class="line">     el: <span class="string">'#app'</span>,</div><div class="line">     router,</div><div class="line">     store,</div><div class="line">     <span class="attr">template</span>: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">     <span class="attr">components</span>: &#123;App&#125;</div><div class="line"> &#125;)</div><div class="line"><span class="comment">// </span></div><div class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">     <span class="keyword">typeof</span> to.meta.pageTitle !== <span class="literal">undefined</span> &amp;&amp; setWechatTitle(to.meta.pageTitle)</div><div class="line">     next() <span class="comment">//确保要调用 next 方法，否则钩子就不会被 resolved。</span></div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
<ul>
<li>至此只需要在route中加入meta属性即可</li>
<li>router/ index.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="comment">// 我的</span></div><div class="line">  path: <span class="string">'/my'</span>,</div><div class="line">  <span class="attr">component</span>: <span class="function">(<span class="params">reslove</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/My/my.vue'</span>], reslove),</div><div class="line">  <span class="attr">meta</span>: &#123;</div><div class="line">    <span class="attr">pageTitle</span>: <span class="string">'我的页面'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以在手机微信上检验效果</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在公司项目的重构,用到的是vue2.0,做的是一个微信m站,但是由于是SPA单页应用,所以就没有所谓的页面 都是router的跳转&lt;br&gt;而网页的标题 随着路由的改变而改变 也就成了一个(伪)需求&lt;/p&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;
    
    </summary>
    
      <category term="vue2" scheme="http://yucccc.com/categories/vue2/"/>
    
    
      <category term="vue2" scheme="http://yucccc.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>vue2绑定内联样式background的一些坑</title>
    <link href="http://yucccc.com/2017/04/11/vue2%E7%BB%91%E5%AE%9A%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8Fbackground%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://yucccc.com/2017/04/11/vue2绑定内联样式background的一些坑/</id>
    <published>2017-04-11T12:28:45.000Z</published>
    <updated>2017-04-11T12:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>此时我有一个需求，给一个盒子添加一个背景图片，这个背景图片是动态请求回来的，那么应该怎么做？看似简单，其实很考研对JavaScript基础的功底以及对vue生命周期的理解。<br>正常情况下的vue内联样式如下写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div :style=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">data: &#123;</div><div class="line">  <span class="attr">activeColor</span>: <span class="string">'red'</span>,</div><div class="line">  <span class="attr">fontSize</span>: <span class="number">30</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时的style绑定的是一个JavaScript对象，在JavaScript中不允许出现 “-“ ，那么绑定一个背景图片应该这么写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div :style=<span class="string">"&#123;background: 'url('+ img +')'，backgroundSize:cover &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">data:&#123;</div><div class="line">  <span class="attr">img</span>:<span class="string">'xxx.png'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了背景图片已经成功通过字符串拼接的方式加上了，我们改为动态请求回来的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;div :style=<span class="string">"&#123;background: 'url('+ img +')'，backgroundSize:cover &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">data:&#123;</div><div class="line">    <span class="attr">img</span>:<span class="string">'xxx.png'</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>:&#123;</div><div class="line"><span class="comment">// 伪代码 请求数据</span></div><div class="line">      getImg()&#123;</div><div class="line">        <span class="keyword">this</span>.$http.get().then(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">          <span class="keyword">this</span>.img = e.data <span class="comment">//将数据赋值给img</span></div><div class="line">        &#125;.bind(<span class="keyword">this</span>))</div><div class="line">      &#125;</div><div class="line">&#125;，</div><div class="line">created()&#123;</div><div class="line"><span class="comment">// 调用函数</span></div><div class="line">    <span class="keyword">this</span>.getImg()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>created vue2生命周期钩子函数<br>在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定data，计算属性computed，方法methods，watcher/事件回调。<br>此时你会发现虽然渲染了出来，但是报错了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error in render function</div><div class="line">Cannot read property &apos;img&apos; of undefined</div></pre></td></tr></table></figure></p>
<p>因为在生命周期 mounted 之前都是虚拟dom 也就是说 当页面已经渲染完，但是vue还没执行，所有数据丢失，此时我们加上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">'img '</span> :style=<span class="string">"&#123;background: 'url('+ img +')'，backgroundSize:cover &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>表示有img属性的时候我们选择这个元素,至此就成功绑定背景图片了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此时我有一个需求，给一个盒子添加一个背景图片，这个背景图片是动态请求回来的，那么应该怎么做？看似简单，其实很考研对JavaScript基础的功底以及对vue生命周期的理解。&lt;br&gt;正常情况下的vue内联样式如下写法：&lt;/p&gt;
&lt;figure class=&quot;highlight
    
    </summary>
    
      <category term="vue2" scheme="http://yucccc.com/categories/vue2/"/>
    
    
      <category term="vue2" scheme="http://yucccc.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>mongodb Windows环境安装及配置</title>
    <link href="http://yucccc.com/2017/04/10/mongodb%20Windows%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://yucccc.com/2017/04/10/mongodb Windows环境安装及配置/</id>
    <published>2017-04-10T12:46:36.000Z</published>
    <updated>2017-04-10T14:22:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近要用 mongodb+node.js+vue2做一个小demo,所以第一步应该是先安装好mongodb,本以为是十分简单的安装,却踩了不少坑。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先到官网下载mongodb <a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="external">点击到官网</a> 选择合适自己的版本,我用的是window 所以下的window版本,此时的mongodb版本为3.4<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img src="http://onzmxf7ol.bkt.clouddn.com/mongodb1.png" alt="mongodb安装"><br>一直点下一步,直到这里，我选择的是custom自定义安装.在E盘根目录下创建了一个MongoDB文件夹,安装在E盘的根目录下 E:\MongoDB文件夹中,要安装在哪里随你便,但是建议放在根目录下，并且记得你安装在哪，等会有用。<br>此时你会看到如下文件<br><img src="http://onzmxf7ol.bkt.clouddn.com/mongodb2.png" alt="mongodb安装"><br>创建数据库目录E:\MongoDB\data，接下来打开命令行窗口，切换到E:\MongoDB\bin 目录执行如下命令：</p>
<p><code>mongod --dbpath E:\MongoDB\data</code><br>–dbpath 指定数据库路径 创建的data是用来存放数据的<br>此时如果最后一行出现（视情况而定,最后是 on port 27017 ）即为成功<br><code>2017-04-10T21:14:16.257+0800 I NETWORK  [thread1] waiting for connections on port 27017</code><br>在浏览中输入：<a href="http://localhost:27017" target="_blank" rel="external">http://localhost:27017</a><br>如果出现 It looks like you are trying to access MongoDB over HTTP on the native driver port. 代表成功安装了。<br>但是你会发现，这样十分的麻烦，每次需要指定数据库，并且需要跑到目录下开启数据库，接下来就是将MongoDB安装为Windows服务</p>
<h3 id="配置window服务"><a href="#配置window服务" class="headerlink" title="配置window服务"></a>配置window服务</h3><p>1:在E:\mongodb\data下新建文件夹log（存放日志文件）并且在里面新建文件<code>mongodb.log</code><br>2:在E:\mongodb中新建文件mongo.config,用记事本打开并在mongo.config中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dbpath=E:\mongodb\data </div><div class="line">logpath=E:\mongodb\log\mongo.log</div></pre></td></tr></table></figure></p>
<p>dppath 代表数据库存放路径<br>logpath 代表日志存放路径<br>如图<br><img src="http://onzmxf7ol.bkt.clouddn.com/mongodb3.png" alt="配置window服务"></p>
<p>重点来了<br>**<br>以管理员身份运行cmd命令行,记得一定要用管理员身份运行,不然会出问题，右击以管理员身份运行,进入E:\mongodb\bin目录，如果你此时在c盘下可以输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd E:\MongoDB\bin</div></pre></td></tr></table></figure></p>
<p>你会发现并没切换到E盘 再次输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E:</div></pre></td></tr></table></figure></p>
<p>就可以切换到 E:\MongoDB\bin 目录下<br>输入如下的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config E:\mongodb\mongo.config --install --serviceName &quot;MongoDB&quot;</div></pre></td></tr></table></figure></p>
<p>如果输出了日期，代表成功了，没输入可以重复上面命令，或者你没用管理员身份运行</p>
<p>打开cmd输入services.msc查看服务找到MongoDB服务，点击启动即可，至此你就成功安装了mongodb并且开机自动启动<br><img src="http://onzmxf7ol.bkt.clouddn.com/mongodb4.png" alt="配置window服务"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近要用 mongodb+node.js+vue2做一个小demo,所以第一步应该是先安装好mongodb,本以为是十分简单的安装,却踩了不少坑。&lt;/p&gt;
&lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;先到官网下载mongodb &lt;a href=&quot;https://www.mongodb.com/download-center?jmp=nav#community&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击到官网&lt;/a&gt; 选择合适自己的版本,我用的是window 所以下的window版本,此时的mongodb版本为3.4&lt;br&gt;
    
    </summary>
    
      <category term="node.js" scheme="http://yucccc.com/categories/node-js/"/>
    
    
      <category term="mongodb" scheme="http://yucccc.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>VueX在ie,safari浏览器无法解析的解决方法</title>
    <link href="http://yucccc.com/2017/04/08/VueX%E5%9C%A8ie-safari%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E8%A7%A3%E6%9E%90%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yucccc.com/2017/04/08/VueX在ie-safari浏览器无法解析的解决方法/</id>
    <published>2017-04-08T11:27:19.000Z</published>
    <updated>2017-04-08T11:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做一个vue2项目时,引入了vuex做一些状态管理，结果调试发现在ie11以下页面显示不出来，打开控制台发现出现如下错误：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4378038-dbbb398beeab58dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ie不支持vuex.png"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[vuex] vuex requires a <span class="built_in">Promise</span> polyfill <span class="keyword">in</span> <span class="keyword">this</span> browser.</div></pre></td></tr></table></figure>
<p>意思为vuex需要在这个浏览器上解析不了  因为vuex基于promise, IE浏览器没有内置Promise对象那么此时我们需要一个解析promise ES6语法的东西。不仅如此，几乎所有的ES6新增的方法在IE都不能用，比如Array.from。因为babel<br>只会转译语法，并不会新增方法。此时你需要<a href="https://babeljs.io/docs/usage/polyfill/" target="_blank" rel="external">babel Polyfill</a> </p>
<h2 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h2><p>polyfill是一种js库，为低版本的js环境补足高版本js里定义的一些原生功能</p>
<p>用法十分简单如下：<br>1：下载<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save babel-polyfill</div></pre></td></tr></table></figure></p>
<p>2 :<br>方法一 ：在main.js最顶部加入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span>  <span class="string">'babel-polyfill'</span>;<span class="comment">//解决ie浏览器不支持promise</span></div></pre></td></tr></table></figure></p>
<p>方法二：或者在webpack中加入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// entry: &#123; // 这是原本脚手架配置的 </span></div><div class="line">  <span class="comment">//   app: './src/main.js'</span></div><div class="line">  <span class="comment">// &#125;,</span></div><div class="line">  entry: &#123; <span class="comment">// 替换成 </span></div><div class="line">    app: [<span class="string">'babel-polyfill'</span>,<span class="string">'./src/main.js'</span>]</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种需要重新npm run dev 因为更改了webpack的配置<br>两种加入方法都可以解决，个人建议第一种方便快捷，此时重新打开浏览器项目就能正常解析了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在做一个vue2项目时,引入了vuex做一些状态管理，结果调试发现在ie11以下页面显示不出来，打开控制台发现出现如下错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4378038-d
    
    </summary>
    
      <category term="vue2" scheme="http://yucccc.com/categories/vue2/"/>
    
    
      <category term="webpack" scheme="http://yucccc.com/tags/webpack/"/>
    
      <category term="vuex" scheme="http://yucccc.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vue2中注册在router-link上事件无效解决方法</title>
    <link href="http://yucccc.com/2017/04/06/Vue2%E4%B8%AD%E6%B3%A8%E5%86%8C%E5%9C%A8router-link%E4%B8%8A%E4%BA%8B%E4%BB%B6%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yucccc.com/2017/04/06/Vue2中注册在router-link上事件无效解决方法/</id>
    <published>2017-04-06T12:16:42.000Z</published>
    <updated>2017-04-06T12:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天用vue在做一个tab栏切换的时候，偶然发现我绑定在router-link上的click并不会触发，<br>后来测试发现，所有绑定在router-link中的事件都不会促发<br>此后查看了官方的文档，也并没有给出明确的说明：<br>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link @click=<span class="string">"change"</span>&gt;&lt;span&gt;&#123;&#123;item.text&#125;&#125;&lt;/span&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure>
<p>此刻我发现，无论如何定义在methods 中的 change函数并不会触发，这是为什么呢？<br>在github查看了vue-router的代码后发现：<br><img src="http://onzmxf7ol.bkt.clouddn.com/20170406routetlink.jpg" alt="vue-router源码"></p>
<h3 id="事件被阻止"><a href="#事件被阻止" class="headerlink" title="事件被阻止"></a>事件被阻止</h3><p>如果当前router-link的tag不是a的话（官方文档中说明：默认为a，可以通过tag改变渲染后的标签），那么就会往自己的子元素（组件）找，找到的第一个就会把一些属性及时间覆盖过去。<br>所以此时事件是被阻止了。个人看法：因为router-link的作用是单纯的路由跳转，如果不阻止事件的话，也许会有很多坑，所以作者干脆阻止了其他事件的触发</p>
<h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link  @click.native=<span class="string">"change"</span>&gt;&lt;span&gt;&#123;&#123;item.text&#125;&#125;&lt;/span&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure>
<p>只需要在@click后面加上native就可以了</p>
<h3 id="原生事件"><a href="#原生事件" class="headerlink" title="原生事件"></a>原生事件</h3><p>添加native事件修饰符之后变为原生事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$element.addEventListener(click, callback);</div></pre></td></tr></table></figure></p>
<p>此时a标签并不会阻止，至此便可以解决绑定在router-link身上的事件不会触发的问题。<br>其次，想要实现tab切换添加class可以在router中添加如下配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  <span class="attr">routes</span>: [],<span class="comment">// 路由跳转配置</span></div><div class="line">  linkActiveClass:<span class="string">'active'</span> <span class="comment">// 在路由中添加配置  active 为跳转到该路由时添加的激活类名</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天用vue在做一个tab栏切换的时候，偶然发现我绑定在router-link上的click并不会触发，&lt;br&gt;后来测试发现，所有绑定在router-link中的事件都不会促发&lt;br&gt;此后查看了官方的文档，也并没有给出明确的说明：&lt;br&gt;代码如下：&lt;/p&gt;
&lt;figure 
    
    </summary>
    
      <category term="vue2" scheme="http://yucccc.com/categories/vue2/"/>
    
    
      <category term="vue2" scheme="http://yucccc.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>vue2搭建开发环境并且可以请求本地数据设置</title>
    <link href="http://yucccc.com/2017/04/04/vue2%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%B9%B6%E4%B8%94%E5%8F%AF%E4%BB%A5%E8%AF%B7%E6%B1%82%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yucccc.com/2017/04/04/vue2搭建开发环境并且可以请求本地数据设置/</id>
    <published>2017-04-04T01:58:34.000Z</published>
    <updated>2017-04-08T11:34:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>  这一个问题困扰了我许久，怎么用vue搭建开发环境并且可以请求本地数据，因为webpack-dev-server在编译vue的时候会默认开启一个端口，本地的服务器肯定也会拥有一个端口，那么不同端口的请求又为跨域请求，此时又不能把端口改为相同，因为这样会造成端口冲突，当然不考虑跨域jsonp之类，虽然jsonp可以做，但是在开发中无疑增加了繁杂度，并且这样做的话上线又要改请求方式，十分麻烦，那么应该怎么做呢？<br>这时候就要用到webpack里面的开启代理的配置,即把请求的地址转发到指定的地址，并且允许跨域请求 如下：</p>
<h2 id="开启webpack代理"><a href="#开启webpack代理" class="headerlink" title="开启webpack代理"></a>开启webpack代理</h2><p>此时找到config文件中的index.js,拉到底部找到<br>dev：{  里面是一些端口的配置} 在里面添加上如下配置<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> dev: &#123;</div><div class="line">    <span class="attr">env</span>: <span class="built_in">require</span>(<span class="string">'./dev.env'</span>),</div><div class="line">    <span class="attr">port</span>: <span class="number">9999</span>,</div><div class="line">    <span class="attr">autoOpenBrowser</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">assetsSubDirectory</span>: <span class="string">'static'</span>,</div><div class="line">    <span class="attr">assetsPublicPath</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">proxyTable</span>: &#123;<span class="comment">// 这里用的是vue-cli脚手架,默认proxyTable:&#123;&#125; ,内容为空 只需要配置这个参数即可</span></div><div class="line">      <span class="string">'/webapi'</span>: &#123;<span class="comment">//代表你以什么为开始请求数据 表示以webapi开头的请求就开启代理</span></div><div class="line">        target: <span class="string">'http://im.ivymei.com'</span>, <span class="comment">//代表代理地址 即：如果 this.$http.get('/webapi').then() 此时会变成http://www.baidu.com/webapi</span></div><div class="line">        changeOrigin: <span class="literal">true</span>,<span class="comment">// 表示允许跨域   </span></div><div class="line">        pathRewrite: &#123;</div><div class="line">          <span class="string">'^/webapi'</span>: <span class="string">'/webapi'</span> <span class="comment">//可要可不要</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">cssSourceMap</span>: <span class="literal">false</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此就可以愉快的请求本地数据了  8080端口也能请求80端口的数据了 最终打包上线也不需要改任何代码,更多的webpack代理设置请查阅webpack官方文档</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  这一个问题困扰了我许久，怎么用vue搭建开发环境并且可以请求本地数据，因为webpack-dev-server在编译vue的时候会默认开启一个端口，本地的服务器肯定也会拥有一个端口，那么不同端口的请求又为跨域请求，此时又不能把端口改为相同，因为这样会造成端口冲突，当然不
    
    </summary>
    
      <category term="webpack" scheme="http://yucccc.com/categories/webpack/"/>
    
    
      <category term="vue2" scheme="http://yucccc.com/tags/vue2/"/>
    
      <category term="webpack" scheme="http://yucccc.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发常见问题（三）</title>
    <link href="http://yucccc.com/2016/06/10/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yucccc.com/2016/06/10/移动端开发常见问题（三）/</id>
    <published>2016-06-10T06:45:37.000Z</published>
    <updated>2017-04-23T14:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关闭iOS输入自动修正"><a href="#关闭iOS输入自动修正" class="headerlink" title="关闭iOS输入自动修正"></a>关闭iOS输入自动修正</h3><p>和英文输入默认自动首字母大写那样，IOS还做了一个功能，默认输入法会开启自动修正输入内容，这样的话，用户经常要操作两次。如果不希望开启此功能，我们可以通过input标签属性来关闭掉：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="禁止文本缩放"><a href="#禁止文本缩放" class="headerlink" title="禁止文本缩放"></a>禁止文本缩放</h3><p>当移动设备横竖屏切换时，文本的大小会重新计算，进行相应的缩放，当我们不需要这种情况时，可以选择禁止：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">　　        -webkit-text-size-adjust: 100%;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是，PC端的该属性已经被移除，该属性在移动端要生效，必须设置 meta viewport。</p>
<h3 id="移动端如何清除输入框内阴影"><a href="#移动端如何清除输入框内阴影" class="headerlink" title="移动端如何清除输入框内阴影"></a>移动端如何清除输入框内阴影</h3><p>在iOS上，输入框默认有内部阴影，但无法使用 box-shadow 来清除，如果不需要阴影，可以这样关闭：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span>,<span class="selector-tag">textarea</span> &#123;</div><div class="line">　　<span class="attribute">border</span>: <span class="number">0</span>; <span class="comment">/* 方法1 */</span></div><div class="line">　　<span class="attribute">-webkit-appearance</span>: none; <span class="comment">/* 方法2 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="快速回弹滚动"><a href="#快速回弹滚动" class="headerlink" title="快速回弹滚动"></a>快速回弹滚动</h3><p>我们先来看看回弹滚动在手机浏览器发展的历史：</p>
<ul>
<li>早期的时候，移动端的浏览器都不支持非body元素的滚动条，所以一般都借助 iScroll;</li>
<li>Android 3.0/iOS解决了非body元素的滚动问题，但滚动条不可见，同时iOS上只能通过2个手指进行滚动；</li>
<li>Android 4.0解决了滚动条不可见及增加了快速回弹滚动效果，不过随后这个特性又被移除；</li>
<li>iOS从5.0开始解决了滚动条不可见及增加了快速回弹滚动效果<br>在iOS上如果你想让一个元素拥有像 Native 的滚动效果，你可以这样做：<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.xxx</span> &#123;</div><div class="line">       <span class="attribute">overflow</span>: auto; <span class="comment">/* auto | scroll */</span></div><div class="line">       <span class="attribute">-webkit-overflow-scrolling</span>: touch;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>PS：iScroll用过之后感觉不是很好，有一些诡异的bug，这里推荐另外一个 iDangero Swiper，这个插件集成了滑屏滚动的强大功能（支持3D），而且还有回弹滚动的内置滚动条。iDangero官方地址： <a href="http://www.idangero.us/swiper/#.VX_t9PmEB8Y" target="_blank" rel="external">http://www.idangero.us/swiper/#.VX_t9PmEB8Y</a></p>
<h3 id="移动端禁止选中内容"><a href="#移动端禁止选中内容" class="headerlink" title="移动端禁止选中内容"></a>移动端禁止选中内容</h3><p>如果你不想用户可以选中页面中的内容，那么你可以在css中禁掉：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.user-select-none</span> &#123;</div><div class="line">  <span class="attribute">-webkit-user-select</span>: none;  <span class="comment">/* Chrome all / Safari all */</span></div><div class="line">  <span class="attribute">-moz-user-select</span>: none;     <span class="comment">/* Firefox all （移动端不需要） */</span></div><div class="line">  <span class="attribute">-ms-user-select</span>: none;      <span class="comment">/* IE 10+ */</span>      </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="移动端取消touch高亮效果"><a href="#移动端取消touch高亮效果" class="headerlink" title="移动端取消touch高亮效果"></a>移动端取消touch高亮效果</h3><p>在做移动端页面时，会发现所有a标签在触发点击时或者所有设置了伪类 :active 的元素，默认都会在激活状态时，显示高亮框，如果不想要这个高亮，那么你可以通过css以下方法来进行全局的禁止：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但这个方法在三星的机子上无效，有一种妥协的方法是把页面非真实跳转链接的a标签换成其它标签，可以解决这个问题。</p>
<h3 id="如何禁止保存或拷贝图像（IOS）"><a href="#如何禁止保存或拷贝图像（IOS）" class="headerlink" title="如何禁止保存或拷贝图像（IOS）"></a>如何禁止保存或拷贝图像（IOS）</h3><p>通常当你在手机或者pad上长按图像 img ，会弹出选项存储图像 或者拷贝图像，如果你不想让用户这么操作，那么你可以通过以下方法来禁止：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">-webkit-touch-callout</span>: none; &#125;</div></pre></td></tr></table></figure></p>
<h3 id="模拟按钮hover效果"><a href="#模拟按钮hover效果" class="headerlink" title="模拟按钮hover效果"></a>模拟按钮hover效果</h3><p>移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，使用css的hover并不能满足我们的需求，还好国外有个激活css的active效果，代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);&#125;</div><div class="line"><span class="selector-class">.btn-blue</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">height</span>:<span class="number">42px</span>;<span class="attribute">line-height</span>:<span class="number">42px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">border-radius</span>:<span class="number">4px</span>;<span class="attribute">font-size</span>:<span class="number">18px</span>;<span class="attribute">color</span>:<span class="number">#FFFFFF</span>;<span class="attribute">background-color</span>: <span class="number">#4185F3</span>;&#125;</div><div class="line"><span class="selector-class">.btn-blue</span><span class="selector-pseudo">:active</span>&#123;<span class="attribute">background-color</span>: <span class="number">#357AE8</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-blue"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"touchstart"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, <span class="literal">true</span>)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">兼容性ios5+、部分android 4+、winphone 8</div><div class="line">要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名。</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);&#125;</div><div class="line"><span class="selector-class">.btn-blue</span>&#123;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="attribute">height</span>:<span class="number">42px</span>;<span class="attribute">line-height</span>:<span class="number">42px</span>;</div><div class="line">    <span class="attribute">text-align</span>:center;<span class="attribute">border-radius</span>:<span class="number">4px</span>;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">18px</span>;<span class="attribute">color</span>:<span class="number">#FFFFFF</span>;<span class="attribute">background-color</span>: <span class="number">#4185F3</span>;&#125;</div><div class="line"><span class="selector-class">.btn-blue-on</span>&#123;<span class="attribute">background-color</span>: <span class="number">#357AE8</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-blue"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> btnBlue = <span class="built_in">document</span>.querySelector(<span class="string">".btn-blue"</span>);</div><div class="line">btnBlue.ontouchstart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.className = <span class="string">"btn-blue btn-blue-on"</span></div><div class="line">&#125;</div><div class="line">btnBlue.ontouchend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.className = <span class="string">"btn-blue"</span></div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="屏幕旋转的事件和样式"><a href="#屏幕旋转的事件和样式" class="headerlink" title="屏幕旋转的事件和样式"></a>屏幕旋转的事件和样式</h3><p>事件<br>window.orientation，取值：正负90表示横屏模式、0和180表现为竖屏模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onorientationchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">switch</span>(<span class="built_in">window</span>.orientation)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">-90</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">90</span>:</div><div class="line">                alert(<span class="string">"横屏:"</span> + <span class="built_in">window</span>.orientation);</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">180</span>:</div><div class="line">                alert(<span class="string">"竖屏:"</span> + <span class="built_in">window</span>.orientation);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>样式<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//竖屏时使用的样式</div><div class="line">@media all and (orientation:portrait) &#123;</div><div class="line">    .css&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//横屏时使用的样式</div><div class="line">@media all and (orientation:landscape) &#123;</div><div class="line">    .css&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="audio元素和video元素在ios和andriod中无法自动播放"><a href="#audio元素和video元素在ios和andriod中无法自动播放" class="headerlink" title="audio元素和video元素在ios和andriod中无法自动播放"></a>audio元素和video元素在ios和andriod中无法自动播放</h3><p>应对方案：触屏即播<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'html'</span>).one(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    audio.play()</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="摇一摇功能"><a href="#摇一摇功能" class="headerlink" title="摇一摇功能"></a>摇一摇功能</h3><p>HTML5 deviceMotion：封装了运动传感器数据的事件，可以获取手机运动状态下的运动加速度等数据。</p>
<h3 id="手机拍照和上传图片"><a href="#手机拍照和上传图片" class="headerlink" title="手机拍照和上传图片"></a>手机拍照和上传图片</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span>的accept 属性</div><div class="line"><span class="comment">&lt;!-- 选择照片 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 选择视频 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">accept</span>=<span class="string">"video/*"</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>使用总结：</p>
<ul>
<li>iOS有拍照、录像、选取本地图片功能</li>
<li>部分android只有选取本地图片功能</li>
<li>winphone不支持</li>
<li>input控件默认外观丑陋</li>
</ul>
</blockquote>
<h3 id="消除transition闪屏"><a href="#消除transition闪屏" class="headerlink" title="消除transition闪屏"></a>消除transition闪屏</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.css</span>&#123;</div><div class="line">    <span class="comment">/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/</span></div><div class="line">    <span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d;</div><div class="line">    <span class="comment">/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/</span></div><div class="line">    <span class="attribute">-webkit-backface-visibility</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="开启硬件加速"><a href="#开启硬件加速" class="headerlink" title="开启硬件加速"></a>开启硬件加速</h3><ul>
<li>解决页面闪白</li>
<li>保证动画流畅<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.css</span> &#123;</div><div class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>设计高性能CSS3动画的几个要素</p>
<ul>
<li>尽可能地使用合成属性transform和opacity来设计CSS3动画</li>
<li>不使用position的left和top来定位</li>
<li>利用translate3D开启GPU加速</li>
</ul>
</blockquote>
<h3 id="android-上去掉语音输入按钮"><a href="#android-上去掉语音输入按钮" class="headerlink" title="android 上去掉语音输入按钮"></a>android 上去掉语音输入按钮</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-speech-button</span> &#123;<span class="attribute">display</span>: none&#125;</div></pre></td></tr></table></figure>
<h3 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a>常用框架</h3><h4 id="移动端基础框架"><a href="#移动端基础框架" class="headerlink" title="移动端基础框架"></a>移动端基础框架</h4><ul>
<li>zepto.js语法与jquery几乎一样，会jquery基本会zepto；</li>
<li>iscroll.js解决页面不支持弹性滚动，不支持fixed引起的问题~ 实现下拉刷新，滑屏，缩放等功能；</li>
<li>underscore.js该库提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象；</li>
<li>fastclick加快移动端点击响应时间</li>
<li>animate.css CSS3动画效果库<h4 id="滑屏框架"><a href="#滑屏框架" class="headerlink" title="滑屏框架"></a>滑屏框架</h4>适合上下滑屏、左右滑屏等滑屏切换页面的效果</li>
<li>slip.js</li>
<li>iSlider.js</li>
<li>fullpage.js<h4 id="瀑布流框架"><a href="#瀑布流框架" class="headerlink" title="瀑布流框架"></a>瀑布流框架</h4></li>
<li>masonry<h4 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h4></li>
<li>caniuse 各浏览器支持html5属性查询</li>
<li>paletton 调色搭配</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关闭iOS输入自动修正&quot;&gt;&lt;a href=&quot;#关闭iOS输入自动修正&quot; class=&quot;headerlink&quot; title=&quot;关闭iOS输入自动修正&quot;&gt;&lt;/a&gt;关闭iOS输入自动修正&lt;/h3&gt;&lt;p&gt;和英文输入默认自动首字母大写那样，IOS还做了一个功能，默认输入法会
    
    </summary>
    
      <category term="移动开发" scheme="http://yucccc.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="移动开发" scheme="http://yucccc.com/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发常见问题（二）</title>
    <link href="http://yucccc.com/2016/06/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yucccc.com/2016/06/08/移动端开发常见问题（二）/</id>
    <published>2016-06-08T07:50:39.000Z</published>
    <updated>2017-04-23T13:53:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="移动端如何定义字体font-family"><a href="#移动端如何定义字体font-family" class="headerlink" title="移动端如何定义字体font-family"></a>移动端如何定义字体font-family</h3><p>三大手机系统的字体：</p>
<blockquote>
<p>iOS 系统</p>
<ul>
<li>默认中文字体是Heiti SC</li>
<li>默认英文字体是Helvetica</li>
<li>默认数字字体是HelveticaNeue</li>
<li>无微软雅黑字体</li>
</ul>
<hr>
<p>Android 系统</p>
<ul>
<li>默认中文字体是Droidsansfallback</li>
<li>默认英文和数字字体是Droid Sans</li>
<li>无微软雅黑字体</li>
</ul>
<hr>
<p>Winphone 系统</p>
<ul>
<li>默认中文字体是Dengxian(方正等线体)</li>
<li>默认英文和数字字体是Segoe</li>
<li>无微软雅黑字体</li>
</ul>
<hr>
<p>各个手机系统有自己的默认字体，且都不支持微软雅黑，如无特殊需求，手机端无需定义中文字体，使用系统默认英文字体和数字字体可使用 Helvetica ，三种系统都支持。<br>移动端定义字体的代码<br><code>body{font-family:Helvetica;}</code></p>
</blockquote>
<h3 id="移动端字体单位font-size选择px还是rem"><a href="#移动端字体单位font-size选择px还是rem" class="headerlink" title="移动端字体单位font-size选择px还是rem"></a>移动端字体单位font-size选择px还是rem</h3><ul>
<li>对于只需要适配手机设备，使用px即可</li>
<li>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备<br>rem配置参考：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--这个网上有许多 根据自己的需求来 --&gt;</span></div><div class="line">html &#123;font-size:10px&#125;</div><div class="line">@media screen and (min-width:480px) and (max-width:639px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 15px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:640px) and (max-width:719px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 20px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:720px) and (max-width:749px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 22.5px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:750px) and (max-width:799px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 23.5px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:800px) and (max-width:959px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 25px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:960px) and (max-width:1079px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 30px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:1080px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 32px</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="移动端touch事件-区分webkit-和-winphone"><a href="#移动端touch事件-区分webkit-和-winphone" class="headerlink" title="移动端touch事件(区分webkit 和 winphone)"></a>移动端touch事件(区分webkit 和 winphone)</h3><p>当用户手指放在移动设备在屏幕上滑动会触发的touch事件</p>
<h4 id="以下支持webkit"><a href="#以下支持webkit" class="headerlink" title="以下支持webkit"></a>以下支持webkit</h4><ul>
<li>touchstart——当手指触碰屏幕时候发生。不管当前有多少只手指</li>
<li>touchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动</li>
<li>touchend——当手指离开屏幕时触发</li>
<li>touchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用</li>
</ul>
<hr>
<h4 id="以下支持winphone-8"><a href="#以下支持winphone-8" class="headerlink" title="以下支持winphone 8"></a>以下支持winphone 8</h4><ul>
<li>MSPointerDown——当手指触碰屏幕时候发生。不管当前有多少只手指</li>
<li>MSPointerMove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html{-ms-touch-action:<br>none;}可以阻止默认情况的发生：阻止页面滚动</li>
<li>MSPointerUp——当手指离开屏幕时触发</li>
</ul>
<h3 id="移动端click屏幕产生200-300-ms的延迟响应"><a href="#移动端click屏幕产生200-300-ms的延迟响应" class="headerlink" title="移动端click屏幕产生200-300 ms的延迟响应"></a>移动端click屏幕产生200-300 ms的延迟响应</h3><p>移动设备上的web网页是有300ms延迟的，往往会造成按钮点击延迟甚至是点击失效。<br>以下是历史原因：</p>
<blockquote>
<p>2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放 (double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速 双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。<br>双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。<br>原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接，此处浏览器会先捕获该次单击，但浏览器不能决定用户是 单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则 浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有 多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说 是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。<br>解决方案：</p>
<ul>
<li>fastclick可以解决在手机上点击事件的300ms延迟</li>
<li>zepto的touch模块，tap事件也是为了解决在click的延迟问题<br>触摸事件的响应顺序<br>1、ontouchstart<br>2、ontouchmove<br>3、ontouchend<br>4、onclick<br>解决300ms延迟的问题，也可以通过绑定ontouchstart事件，加快对事件的响应。</li>
</ul>
</blockquote>
<h3 id="什么是Retina-显示屏，带来了什么问题"><a href="#什么是Retina-显示屏，带来了什么问题" class="headerlink" title="什么是Retina 显示屏，带来了什么问题"></a>什么是Retina 显示屏，带来了什么问题</h3><p><em>retina</em><br>retina：一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个<br>在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的2倍。<br>那么，前端的应对方案是：<br>设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2</p>
<p>//例如图片宽高为：200px*200px，那么写法如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.css</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">background-size</span>:<span class="number">100px</span> <span class="number">100px</span>;&#125;</div></pre></td></tr></table></figure></p>
<p>//其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.css</span>&#123;<span class="attribute">font-size</span>:<span class="number">20px</span>&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉"><a href="#ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉" class="headerlink" title="ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉"></a>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h3><p>ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0，也就是属性值的最后一位设置为0就可以去除半透明灰色遮罩。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0;)&#125;</div></pre></td></tr></table></figure></p>
<h3 id="部分android系统中元素被点击时产生的边框怎么去掉"><a href="#部分android系统中元素被点击时产生的边框怎么去掉" class="headerlink" title="部分android系统中元素被点击时产生的边框怎么去掉"></a>部分android系统中元素被点击时产生的边框怎么去掉</h3><p>android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>&#123;</div><div class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0;)</div><div class="line">    -webkit-user-modify:read-write-plaintext-only; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符。<br>另外，有些机型去除不了，如小米2<br>对于按钮类还有个办法，不使用a或者input标签，直接用div标签</p>
<h3 id="winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉"><a href="#winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉" class="headerlink" title="winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉"></a>winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="webkit表单元素的默认外观怎么重置"><a href="#webkit表单元素的默认外观怎么重置" class="headerlink" title="webkit表单元素的默认外观怎么重置"></a>webkit表单元素的默认外观怎么重置</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.css</span>&#123;<span class="attribute">-webkit-appearance</span>:none;&#125;</div></pre></td></tr></table></figure>
<h3 id="webkit表单输入框placeholder的颜色值能改变么"><a href="#webkit表单输入框placeholder的颜色值能改变么" class="headerlink" title="webkit表单输入框placeholder的颜色值能改变么"></a>webkit表单输入框placeholder的颜色值能改变么</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span>&#123;<span class="attribute">color</span>:<span class="number">#AAAAAA</span>;&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span>&#123;<span class="attribute">color</span>:red&#125;</div></pre></td></tr></table></figure>
<h3 id="webkit表单输入框placeholder的文字能换行么"><a href="#webkit表单输入框placeholder的文字能换行么" class="headerlink" title="webkit表单输入框placeholder的文字能换行么"></a>webkit表单输入框placeholder的文字能换行么</h3><blockquote>
<p>iOS可以，Android不行</p>
<h3 id="关闭iOS键盘首字母自动大写"><a href="#关闭iOS键盘首字母自动大写" class="headerlink" title="关闭iOS键盘首字母自动大写"></a>关闭iOS键盘首字母自动大写</h3><p>在iOS中，默认情况下键盘是开启首字母大写的功能的，如果启用这个功能，可以这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocapitalize</span>=<span class="string">"off"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;移动端如何定义字体font-family&quot;&gt;&lt;a href=&quot;#移动端如何定义字体font-family&quot; class=&quot;headerlink&quot; title=&quot;移动端如何定义字体font-family&quot;&gt;&lt;/a&gt;移动端如何定义字体font-family&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="移动开发" scheme="http://yucccc.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="移动开发" scheme="http://yucccc.com/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发常见问题（一）</title>
    <link href="http://yucccc.com/2016/06/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yucccc.com/2016/06/06/移动端开发常见问题（一）/</id>
    <published>2016-06-06T12:36:12.000Z</published>
    <updated>2017-04-23T14:18:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Meta相关</p>
<h3 id="添加到主屏后的标题（IOS）"><a href="#添加到主屏后的标题（IOS）" class="headerlink" title="添加到主屏后的标题（IOS）"></a>添加到主屏后的标题（IOS）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"标题"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="启用-WebApp-全屏模式（IOS）"><a href="#启用-WebApp-全屏模式（IOS）" class="headerlink" title="启用 WebApp 全屏模式（IOS）"></a>启用 WebApp 全屏模式（IOS）</h3><p>当网站添加到主屏幕后再点击进行启动时，可隐藏地址栏（从浏览器跳转或输入链接进入并没有此效果）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-touch-fullscreen"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="百度禁止转码"><a href="#百度禁止转码" class="headerlink" title="百度禁止转码"></a>百度禁止转码</h3><p>通过百度手机打开网页时，百度可能会对你的网页进行转码，往你页面贴上它的广告，非常之恶心。不过我们可以通过这个meta标签来禁止它：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-siteapp"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="设置状态栏的背景颜色（IOS）"><a href="#设置状态栏的背景颜色（IOS）" class="headerlink" title="设置状态栏的背景颜色（IOS）"></a>设置状态栏的背景颜色（IOS）</h3><p>设置状态栏的背景颜色，只有在”apple-mobile-web-app-capable” content=”yes”时生效<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black-translucent"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>content 参数：</p>
<ul>
<li>default ：状态栏背景是白色。</li>
<li>black ：状态栏背景是黑色。</li>
<li>black-translucent ：状态栏背景是半透明。 如果设置为 default 或 black ,网页内容从状态栏底部开始。<br>如果设置为 black-translucent ,网页内容充满整个屏幕，顶部会被状态栏遮挡。</li>
</ul>
</blockquote>
<h3 id="移动端手机号码识别（IOS）"><a href="#移动端手机号码识别（IOS）" class="headerlink" title="移动端手机号码识别（IOS）"></a>移动端手机号码识别（IOS）</h3><p>在 iOS Safari （其他浏览器和Android均不会）上会对那些看起来像是电话号码的数字处理为电话链接，比如：</p>
<blockquote>
<ul>
<li>7位数字，形如：1234567</li>
<li>带括号及加号的数字，形如：(+86)123456789</li>
<li>双连接线的数字，形如：00-00-00111</li>
<li>11位数字，形如：13800138000</li>
</ul>
</blockquote>
<p>可能还有其他类型的数字也会被识别。我们可以通过如下的meta来关闭电话号码的自动识别：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">关闭电话号码自动识别</div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></div><div class="line">开启电话功能</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:123456"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">开启短信功能：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:123456"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="移动端邮箱识别（Android）"><a href="#移动端邮箱识别（Android）" class="headerlink" title="移动端邮箱识别（Android）"></a>移动端邮箱识别（Android）</h3><p>与电话号码的识别一样，在安卓上会对符合邮箱格式的字符串进行识别，我们可以通过如下的meta来关闭邮箱的自动识别：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">关闭邮箱的自动识别</div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span> </div><div class="line">开启长按邮箱地址弹出邮件发送的功能：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">mailto:dooyoe</span>@<span class="attr">gmail.com</span>"&gt;</span>dooyoe@gmail.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="添加智能-App-广告条-Smart-App-Banner（IOS-6-Safari）"><a href="#添加智能-App-广告条-Smart-App-Banner（IOS-6-Safari）" class="headerlink" title="添加智能 App 广告条 Smart App Banner（IOS 6+ Safari）"></a>添加智能 App 广告条 Smart App Banner（IOS 6+ Safari）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="IOS-Web-app启动动画"><a href="#IOS-Web-app启动动画" class="headerlink" title="IOS Web app启动动画"></a>IOS Web app启动动画</h4><p>由于iPad 的启动画面是不包括状态栏区域的。所以启动图片需要减去状态栏区域所对应的方向上的20px大小，相应地在retina设备上要减去40px的大小。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-320x460.png"</span> <span class="attr">media</span>=<span class="string">"(device-width: 320px)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-640x960.png"</span> <span class="attr">media</span>=<span class="string">"(device-width: 320px) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-768x1004.png"</span> <span class="attr">media</span>=<span class="string">"(device-width: 768px) and (orientation: portrait)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-748x1024.png"</span> <span class="attr">media</span>=<span class="string">"(device-width: 768px) and (orientation: landscape)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-1536x2008.png"</span> <span class="attr">media</span>=<span class="string">"(device-width: 1536px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-2048x1496.png"</span> <span class="attr">media</span>=<span class="string">"(device-width: 1536px)  and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>&gt;</span></div><div class="line">（landscape：横屏 | portrait：竖屏）</div></pre></td></tr></table></figure></p>
<h4 id="添加到主屏后的APP图标"><a href="#添加到主屏后的APP图标" class="headerlink" title="添加到主屏后的APP图标"></a>添加到主屏后的APP图标</h4><p>指定web app添加到主屏后的图标路径，有两种略微不同的方式：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 设计原图 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"short_cut_114x114.png"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 添加高光效果 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"short_cut_114x114.png"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>apple-touch-icon：在IOS6及以下的版本会自动为图标添加一层高光效果（IOS7开始已使用扁平化的设计风格）</li>
<li>apple-touch-icon-precomposed：使用“设计原图图标”</li>
</ul>
<blockquote>
<ul>
<li>图标尺寸：<br>可通过指定size属性来为不同的设备提供不同的图标（但通常来说，我们只需提供一个114 x 114 pixels大小的图标即可 ）</li>
<li>官方说明如下：<br>Create different sizes of your app icon for different devices. If you’re creating a universal app, you need to supply app<br>icons in all four sizes.<br>For iPhone and iPod touch both of these sizes are required:<br>57 x 57 pixels<br>114 x 114 pixels (high resolution)<br>For iPad, both of these sizes are required:<br>72 x 72 pixels<br>144 x 144 (high resolution)</li>
</ul>
</blockquote>
<h3 id="优先使用最新版本-IE-和-Chrome"><a href="#优先使用最新版本-IE-和-Chrome" class="headerlink" title="优先使用最新版本 IE 和 Chrome"></a>优先使用最新版本 IE 和 Chrome</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="viewport模板"><a href="#viewport模板" class="headerlink" title="viewport模板"></a>viewport模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">这里开始内容</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Meta相关&lt;/p&gt;
&lt;h3 id=&quot;添加到主屏后的标题（IOS）&quot;&gt;&lt;a href=&quot;#添加到主屏后的标题（IOS）&quot; class=&quot;headerlink&quot; title=&quot;添加到主屏后的标题（IOS）&quot;&gt;&lt;/a&gt;添加到主屏后的标题（IOS）&lt;/h3&gt;&lt;figure cla
    
    </summary>
    
      <category term="移动开发" scheme="http://yucccc.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="移动开发" scheme="http://yucccc.com/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>javascript常见的表单输入限制方法代码</title>
    <link href="http://yucccc.com/2016/04/22/javascript%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E9%99%90%E5%88%B6%E6%96%B9%E6%B3%95%E4%BB%A3%E7%A0%81/"/>
    <id>http://yucccc.com/2016/04/22/javascript常见的表单输入限制方法代码/</id>
    <published>2016-04-22T04:36:07.000Z</published>
    <updated>2017-04-20T14:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期公司在做一个后台管理系统,各种要限制输入,网上资料虽有，但是比较散乱，个人收集一些常用的表单限制代码</p>
<p>1.文本框只能输入数字代码(小数点也不能输入)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"this.value=this.value.replace(/\D/g,'')"</span> <span class="attr">onafterpaste</span>=<span class="string">"this.value=this.value.replace(/\D/g,'')"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.只能输入数字,能输小数点<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"if(isNaN(value))execCommand('undo')"</span> <span class="attr">onafterpaste</span>=<span class="string">"if(isNaN(value))execCommand('undo')"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onchange</span>=<span class="string">"if(/\D/.test(this.value))&#123;alert('只能输入数字');this.value='';&#125;"</span> <span class="attr">name</span>=<span class="string">txt1</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.只能输入字母和汉字<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[\d]/g,'') "</span><span class="attr">onbeforepaste</span>=<span class="string">"clipboardData.setData('text',clipboardData.getData('text').replace(/[\d]/g,''))"</span> <span class="attr">maxlength</span>=<span class="string">10</span> <span class="attr">name</span>=<span class="string">"Numbers"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>4.只能输入英文字母和数字,不能输入中文<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[^\w\.\/]/ig,'')"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>5.只能输入数字和英文<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onKeyUp</span>=<span class="string">"value=value.replace(/[^\d|chun]/g,'')"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>6.小数点后只能有最多两位(数字,中文都可输入),不能输入字母和运算符号<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onKeyPress</span>=<span class="string">"if((event.keyCode&lt;48 || event.keyCode&gt;57) &amp;&amp; event.keyCode!=46 || /\.\d\d$/.test(value))event.returnValue=false"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>7.小数点后只能有最多两位(数字,字母,中文都可输入),可以输入运算符号<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"this.value=this.value.replace(/^(\-)*(\d+)\.(\d\d).*$/,'$1$2.$3')"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>8.只能输入中文：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"realname"</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">maxlength</span>=<span class="string">"20"</span> <span class="attr">class</span>=<span class="string">"input_style"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[^\u4E00-\u9FA5]/g,'')"</span> <span class="attr">onbeforepaste</span>=<span class="string">"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\u4E00-\u9FA5]/g,''))"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期公司在做一个后台管理系统,各种要限制输入,网上资料虽有，但是比较散乱，个人收集一些常用的表单限制代码&lt;/p&gt;
&lt;p&gt;1.文本框只能输入数字代码(小数点也不能输入)&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
      <category term="javascript" scheme="http://yucccc.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yucccc.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>限制H5 date日期控件所选日期不能晚于当前日期</title>
    <link href="http://yucccc.com/2016/04/10/%E9%99%90%E5%88%B6H5inputtype-date%E6%97%A5%E6%9C%9F%E6%8E%A7%E4%BB%B6%E6%89%80%E9%80%89%E6%97%A5%E6%9C%9F%E4%B8%8D%E8%83%BD%E6%99%9A%E4%BA%8E%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F/"/>
    <id>http://yucccc.com/2016/04/10/限制H5inputtype-date日期控件所选日期不能晚于当前日期/</id>
    <published>2016-04-10T14:07:11.000Z</published>
    <updated>2017-04-20T14:25:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>道理其实很简单 只需要限制 max = ‘当前日期即可’</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">max</span>=<span class="string">"当前日期"</span> <span class="attr">class</span>=<span class="string">'limit-max-date'</span>&gt;</span></div></pre></td></tr></table></figure>
<p>那么只需要动态设置max值即可 一定要遵循 YYYY-MM-DD</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取input </span></div><div class="line"><span class="keyword">var</span> input1 = <span class="built_in">document</span>.querySelector(<span class="string">'.limit-max-date'</span>);</div><div class="line"><span class="comment">// 获取当前日期</span></div><div class="line"><span class="keyword">var</span> tDate  = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="keyword">var</span> seperator1 = <span class="string">"-"</span>;</div><div class="line">    <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;<span class="comment">//月</span></div><div class="line">    <span class="keyword">var</span> strDate = date.getDate();<span class="comment">//日</span></div><div class="line">    <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">9</span>) &#123;</div><div class="line">        month = <span class="string">"0"</span> + month;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (strDate &gt;= <span class="number">0</span> &amp;&amp; strDate &lt;= <span class="number">9</span>) &#123;</div><div class="line">        strDate = <span class="string">"0"</span> + strDate;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> date.getFullYear() + seperator1 + month + seperator1 + strDate</div><div class="line"></div><div class="line">&#125;)()</div><div class="line">input1.setAttribute(<span class="string">'max'</span>,tDate)<span class="comment">// 设置max值为当前日期</span></div></pre></td></tr></table></figure>
<p>至此就不能选择比今天更晚的日期,一般用于选择生日时间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;道理其实很简单 只需要限制 max = ‘当前日期即可’&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
    
    </summary>
    
      <category term="javascript" scheme="http://yucccc.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yucccc.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现jQuery中的type检测数据类型</title>
    <link href="http://yucccc.com/2016/03/20/JavaScript%E5%AE%9E%E7%8E%B0jQuery%E4%B8%AD%E7%9A%84type%E6%A3%80%E6%B5%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yucccc.com/2016/03/20/JavaScript实现jQuery中的type检测数据类型/</id>
    <published>2016-03-20T14:30:10.000Z</published>
    <updated>2017-04-13T14:35:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，JavaScript中的typeof虽然可以检测数据类型，但是在检测数据类型的时候,返回的数据类型不一定准确:比如 null 也会返回null ，返回的数据类型只有下面几种，远远不能准确的判断属于何种数据类型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"undefined"</span> ——如果这个值未定义；</div><div class="line"><span class="string">"boolean"</span> ——如果这个值是布尔值；</div><div class="line"><span class="string">"string"</span> ——如果这个值是字符串；</div><div class="line"> <span class="string">"number"</span> ——如果这个值是数值；</div><div class="line"><span class="string">"object"</span> ——如果这个值是对象或 <span class="literal">null</span> ；</div><div class="line"><span class="string">"function"</span> ——如果这个值是函数。</div></pre></td></tr></table></figure></p>
<p>在网上也看了一些所谓的全面的检测方法，也没有很好的实现封装。无聊之余看了下jQuery的type实现方法，现在我用JavaScript实现一下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个对象保存所有的数据类型</span></div><div class="line">    <span class="keyword">var</span> class2type = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> dataType = <span class="string">"Boolean Number String Function Array Date RegExp Object Error Symbol"</span>.split(<span class="string">" "</span>);</div><div class="line">    <span class="comment">//把所有的数据类型遍历进class2type里面 jQuery中用的是自己封装的each  forEach() 是es5新增的方法</span></div><div class="line">    dataType.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name, i</span>) </span>&#123;</div><div class="line">        class2type[<span class="string">"[object "</span> + name + <span class="string">"]"</span>] = name.toLowerCase();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> type = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123; <span class="comment">// 当等于undefined 或者 null 直接返回 </span></div><div class="line">            <span class="keyword">return</span> obj + <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"object"</span> || <span class="keyword">typeof</span> obj === <span class="string">"function"</span> ?</div><div class="line">            class2type[toString.call(obj)] || <span class="string">"object"</span> :</div><div class="line">            <span class="keyword">typeof</span> obj;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>至此便可以检测JavaScript中的所有数据类型了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，JavaScript中的typeof虽然可以检测数据类型，但是在检测数据类型的时候,返回的数据类型不一定准确:比如 null 也会返回null ，返回的数据类型只有下面几种，远远不能准确的判断属于何种数据类型。&lt;br&gt;&lt;figure class=&quot;highligh
    
    </summary>
    
      <category term="javascript" scheme="http://yucccc.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yucccc.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>读高程有感之JavaScript代码可维护性</title>
    <link href="http://yucccc.com/2016/03/18/%E8%AF%BB%E9%AB%98%E7%A8%8B%E6%9C%89%E6%84%9F%E4%B9%8BJavaScript%E4%BB%A3%E7%A0%81%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7/"/>
    <id>http://yucccc.com/2016/03/18/读高程有感之JavaScript代码可维护性/</id>
    <published>2016-03-18T07:35:28.000Z</published>
    <updated>2017-04-10T14:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期一直在研读高级程序设计一书，其中第二十四章《最佳实践》中提到代码的可维护性，其中本人深有感触。</p>
<h2 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h2><p>在从事IT编程工作一段时间后发现，每进一家新公司，都要花大量的时间去研读别人的代码，其余剩下的大量时间都是维护别人的代码，由于编程人员水平的参差不齐，所有经常在看上一个同事代码的时候也很难抑制内心的冲动，这写的什么鬼，一句注释没有，重复的代码这么多也不封装，所以编写可维护性的代码尤为重要，并且我觉得一个程序员一开始就应该先养成良好的代码习惯，做到像写诗一样写代码，从而能力才能更进一步，在我认为，代码风格都不好，其他一切都是空谈。</p>
<h2 id="什么是可维护的代码"><a href="#什么是可维护的代码" class="headerlink" title="什么是可维护的代码"></a>什么是可维护的代码</h2><p>可维护的代码有一些特征。一般来说，如果说代码是可维护的，它需要遵循以下特点。<br>1、可理解性——其他人可以接手代码并理解它的意图和一般途径，而无需原开发人员的完整解释。<br>2、直观性——代码中的东西一看就能明白，不管其操作过程多么复杂。<br>3、可适应性——代码以一种数据上的变化不要求完全重写的方法撰写。<br>4、可扩展性——在代码架构上已考虑到在未来允许对核心功能进行扩展。<br>5、可调试性——当有地方出错时，代码可以给予你足够的信息来尽可能直接地确定问题所在。<br>对于专业人士而言，能写出可维护的 JavaScript 代码是非常重要的技能。</p>
<h2 id="代码的约定"><a href="#代码的约定" class="headerlink" title="代码的约定"></a>代码的约定</h2><p>绝大多数语言都有各自的代码约定，只要在网上一搜就能找到大量相关文档。由于 JavaScript 的可适应性，代码约定对它也很重要。这里建议大家有空经常到github上看一下别人的开源代码，会有意想不到的收获及思路。</p>
<h3 id="1-可读性"><a href="#1-可读性" class="headerlink" title="1. 可读性"></a>1. 可读性</h3><p>可读性与代码作为文本文件的格式化方式有关。当所有人都使用一样的缩进方式时，整个项目中的代码都会更加易于阅读。目前许多框架都提供了这么一个检测代码的插件，eslint也是一个不错的练习，如vue-cli在构建项目时也会问你是否开启eslint，个人觉得是个不错的养成代码良好风格的练习方式</p>
<h3 id="2-多写注释"><a href="#2-多写注释" class="headerlink" title="2. 多写注释"></a>2. 多写注释</h3><p>很多时候我上个星期写的代码，这个星期就不记得了，所有多写注释十分重要</p>
<h3 id="3-变量名和函数名"><a href="#3-变量名和函数名" class="headerlink" title="3. 变量名和函数名"></a>3. 变量名和函数名</h3><p> 变量名应为名词 如 car 或 person<br> 函数名应该以动词开始，如 getName()<br> 返回布尔类型值的函数一般以 is 开头，如 isEnable() 。<br> 变量和函数都应使用合乎逻辑的名字，不用担心长度。因为最终在生产环境下代码可以被压缩打包，例如webpack和gulp都提供了这些功能。</p>
<h3 id="4-变量类型透明"><a href="#4-变量类型透明" class="headerlink" title="4. 变量类型透明"></a>4. 变量类型透明</h3><p>由于在 JavaScript 中变量是松散类型的，很容易就忘记变量所应包含的数据类型。合适的命名方式<br>可以一定程度上缓解这个问题，但放到所有的情况下看，还不够。有三种表示变量数据类型的方式。<br>//第一种方式：通过初始化指定变量类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> found = <span class="literal">false</span>; <span class="comment">//布尔型</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">-1</span>; <span class="comment">//数字</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">""</span>; <span class="comment">//字符串</span></div><div class="line"><span class="keyword">var</span> person = <span class="literal">null</span>; <span class="comment">//对象</span></div></pre></td></tr></table></figure></p>
<p>初始化为一个特定的数据类型可以很好的指明变量的类型。但缺点是它无法用于函数声明中的函数参数。<br>//第二种方法：用指定数据类型的匈牙利标记法，这个标记法在脚本语言中很流行，曾经很长时间也是 JavaScript 所推崇的方式，”o” 代表对象， “s” 代表字符串， “i”<br>代表整数， “f” 代表浮点数， “b” 代表布尔型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bFound; <span class="comment">//布尔型</span></div><div class="line"><span class="keyword">var</span> iCount; <span class="comment">//整数</span></div><div class="line"><span class="keyword">var</span> sName; <span class="comment">//字符串</span></div><div class="line"><span class="keyword">var</span> oPerson; <span class="comment">//对象</span></div></pre></td></tr></table></figure></p>
<p>JavaScript 中用匈牙利标记法的好处是函数参数一样可以使用。但它的缺点是让代码某种程度上难以阅读，阻碍了没有用它时代码的直观性和句子式的特质。因此，匈牙利标记法失去了一些开发者的宠爱。<br>//第三种方法：用于指定类型的类型注释 类型注释放在变量名右边，但是在初始化前面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> found <span class="comment">/*:Boolean*/</span> = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> count <span class="comment">/*:int*/</span> = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> name <span class="comment">/*:String*/</span> = <span class="string">"Nicholas"</span>;</div><div class="line"><span class="keyword">var</span> person <span class="comment">/*:Object*/</span> = <span class="literal">null</span>;</div></pre></td></tr></table></figure></p>
<p>类型注释维持了代码的整体可读性，同时注入了类型信息。类型注释的缺点是你不能用多行注释一次注释大块的代码，因为类型注释也是多行注释，两者会冲突 。<br>这三种常见指定变量数据类型的方法。每种都有各自的优势和劣势，要自己在使用之前进<br>行评估。最重要的是要确定哪种最适合你的项目并一致使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期一直在研读高级程序设计一书，其中第二十四章《最佳实践》中提到代码的可维护性，其中本人深有感触。&lt;/p&gt;
&lt;h2 id=&quot;可维护性&quot;&gt;&lt;a href=&quot;#可维护性&quot; class=&quot;headerlink&quot; title=&quot;可维护性&quot;&gt;&lt;/a&gt;可维护性&lt;/h2&gt;&lt;p&gt;在从事IT
    
    </summary>
    
      <category term="javascript" scheme="http://yucccc.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yucccc.com/tags/javascript/"/>
    
  </entry>
  
</feed>
