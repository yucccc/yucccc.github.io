<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宇cccc</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yucccc.com/"/>
  <updated>2017-04-23T12:12:11.000Z</updated>
  <id>http://yucccc.com/</id>
  
  <author>
    <name>宇cccc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>真机调试移动端vue项目</title>
    <link href="http://yucccc.com/2017/04/23/%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E7%A7%BB%E5%8A%A8%E7%AB%AFvue%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yucccc.com/2017/04/23/真机调试移动端vue项目/</id>
    <published>2017-04-23T12:03:41.000Z</published>
    <updated>2017-04-23T12:12:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做移动端项目的时候经常用到真机调试，总不能每次都把文件打包放到测试机上看，这样很影响效率，虽然现在的pc浏览器基本都自带了仿真器，但是往往在pc仿真上没问题，但是到了真机上就出现各种各样的问题，那么我们就需要一些方法来使用真机调试。</p>
<p>使用 <strong><a href="https://github.com/wuchangming/spy-debugger" target="_blank" rel="external">spy-debugger</a></strong> </p>
<h3 id="关于spy-debugger"><a href="#关于spy-debugger" class="headerlink" title="关于spy-debugger"></a>关于spy-debugger</h3><p>一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybirdApp等）。支持HTTP/HTTPS，无需USB连接设备。</p>
<p>使用方法很简单： </p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Windows 下<br><code>npm install spy-debugger -g</code></p>
<p>Mac 下<br><code>sudo npm install spy-debugger -g</code></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>第一步：手机和PC保持在同一网络下（比如同时连到一个Wi-Fi下）</p>
<p>第二步：命令行输入spy-debugger。</p>
<p>第三步：设置手机的HTTP代理，代理IP地址设置为PC的IP地址，端口为spy-debugger<br>的启动端口(默认端口：9888)。<br>Android设置代理步骤：设置 - WLAN - 长按选中网络 - 修改网络 - 高级 - 代理设置 - 手动<br>iOS设置代理步骤：设置 - 无线局域网 - 选中网络 - HTTP代理手动</p>
<p>第四步：手机安装证书。<strong>注：手机必须先设置完代理后再通过(非微信)手机浏览器访问<a href="http://s.xxx" target="_blank" rel="external">http://s.xxx</a><br><a href="https://github.com/wuchangming/spy-debugger/blob/master/demo/img/QRCodeForCert.png" target="_blank" rel="external">(地址二维码)
</a>安装证书</strong>（手机首次调试需要安装证书，已安装了证书的手机无需重复安装)。</p>
<p>第五步：用手机浏览器访问你要调试的页面即可。<br>比如我运行在电脑的 vue程序是 localhost:8888 那么此时我在手机上输入代理的IP地址  即PC的IP地址+：8888<br>假设我的ip地址为  123.123.12.123 那么我在手机上输入的地址应该是<br>123.123.12.123 ：8888  如果是微信打开需要加上 http://  就可以开启调试了</p>
<p>其他设置请查看作者的文档</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做移动端项目的时候经常用到真机调试，总不能每次都把文件打包放到测试机上看，这样很影响效率，虽然现在的pc浏览器基本都自带了仿真器，但是往往在pc仿真上没问题，但是到了真机上就出现各种各样的问题，那么我们就需要一些方法来使用真机调试。&lt;/p&gt;
&lt;p&gt;使用 &lt;strong&gt;&lt;
    
    </summary>
    
      <category term="vue2" scheme="http://yucccc.com/categories/vue2/"/>
    
    
      <category term="vue2" scheme="http://yucccc.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>vue2绑定内联样式background的一些坑</title>
    <link href="http://yucccc.com/2017/04/11/vue2%E7%BB%91%E5%AE%9A%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8Fbackground%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://yucccc.com/2017/04/11/vue2绑定内联样式background的一些坑/</id>
    <published>2017-04-11T12:28:45.000Z</published>
    <updated>2017-04-11T12:29:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>此时我有一个需求，给一个盒子添加一个背景图片，这个背景图片是动态请求回来的，那么应该怎么做？看似简单，其实很考研对JavaScript基础的功底以及对vue生命周期的理解。<br>正常情况下的vue内联样式如下写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div :style=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">data: &#123;</div><div class="line">  <span class="attr">activeColor</span>: <span class="string">'red'</span>,</div><div class="line">  <span class="attr">fontSize</span>: <span class="number">30</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时的style绑定的是一个JavaScript对象，在JavaScript中不允许出现 “-“ ，那么绑定一个背景图片应该这么写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div :style=<span class="string">"&#123;background: 'url('+ img +')'，backgroundSize:cover &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">data:&#123;</div><div class="line">  <span class="attr">img</span>:<span class="string">'xxx.png'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了背景图片已经成功通过字符串拼接的方式加上了，我们改为动态请求回来的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;div :style=<span class="string">"&#123;background: 'url('+ img +')'，backgroundSize:cover &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">data:&#123;</div><div class="line">    <span class="attr">img</span>:<span class="string">'xxx.png'</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>:&#123;</div><div class="line"><span class="comment">// 伪代码 请求数据</span></div><div class="line">      getImg()&#123;</div><div class="line">        <span class="keyword">this</span>.$http.get().then(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">          <span class="keyword">this</span>.img = e.data <span class="comment">//将数据赋值给img</span></div><div class="line">        &#125;.bind(<span class="keyword">this</span>))</div><div class="line">      &#125;</div><div class="line">&#125;，</div><div class="line">created()&#123;</div><div class="line"><span class="comment">// 调用函数</span></div><div class="line">    <span class="keyword">this</span>.getImg()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>created vue2生命周期钩子函数<br>在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定data，计算属性computed，方法methods，watcher/事件回调。<br>此时你会发现虽然渲染了出来，但是报错了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error in render function</div><div class="line">Cannot read property &apos;img&apos; of undefined</div></pre></td></tr></table></figure></p>
<p>因为在生命周期 mounted 之前都是虚拟dom 也就是说 当页面已经渲染完，但是vue还没执行，所有数据丢失，此时我们加上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">'img '</span> :style=<span class="string">"&#123;background: 'url('+ img +')'，backgroundSize:cover &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>表示有img属性的时候我们选择这个元素,至此就成功绑定背景图片了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此时我有一个需求，给一个盒子添加一个背景图片，这个背景图片是动态请求回来的，那么应该怎么做？看似简单，其实很考研对JavaScript基础的功底以及对vue生命周期的理解。&lt;br&gt;正常情况下的vue内联样式如下写法：&lt;/p&gt;
&lt;figure class=&quot;highlight
    
    </summary>
    
      <category term="vue2" scheme="http://yucccc.com/categories/vue2/"/>
    
    
      <category term="vue2" scheme="http://yucccc.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>mongodb Windows环境安装及配置</title>
    <link href="http://yucccc.com/2017/04/10/mongodb%20Windows%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://yucccc.com/2017/04/10/mongodb Windows环境安装及配置/</id>
    <published>2017-04-10T12:46:36.000Z</published>
    <updated>2017-04-10T14:22:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近要用 mongodb+node.js+vue2做一个小demo,所以第一步应该是先安装好mongodb,本以为是十分简单的安装,却踩了不少坑。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先到官网下载mongodb <a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="external">点击到官网</a> 选择合适自己的版本,我用的是window 所以下的window版本,此时的mongodb版本为3.4<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img src="http://onzmxf7ol.bkt.clouddn.com/mongodb1.png" alt="mongodb安装"><br>一直点下一步,直到这里，我选择的是custom自定义安装.在E盘根目录下创建了一个MongoDB文件夹,安装在E盘的根目录下 E:\MongoDB文件夹中,要安装在哪里随你便,但是建议放在根目录下，并且记得你安装在哪，等会有用。<br>此时你会看到如下文件<br><img src="http://onzmxf7ol.bkt.clouddn.com/mongodb2.png" alt="mongodb安装"><br>创建数据库目录E:\MongoDB\data，接下来打开命令行窗口，切换到E:\MongoDB\bin 目录执行如下命令：</p>
<p><code>mongod --dbpath E:\MongoDB\data</code><br>–dbpath 指定数据库路径 创建的data是用来存放数据的<br>此时如果最后一行出现（视情况而定,最后是 on port 27017 ）即为成功<br><code>2017-04-10T21:14:16.257+0800 I NETWORK  [thread1] waiting for connections on port 27017</code><br>在浏览中输入：<a href="http://localhost:27017" target="_blank" rel="external">http://localhost:27017</a><br>如果出现 It looks like you are trying to access MongoDB over HTTP on the native driver port. 代表成功安装了。<br>但是你会发现，这样十分的麻烦，每次需要指定数据库，并且需要跑到目录下开启数据库，接下来就是将MongoDB安装为Windows服务</p>
<h3 id="配置window服务"><a href="#配置window服务" class="headerlink" title="配置window服务"></a>配置window服务</h3><p>1:在E:\mongodb\data下新建文件夹log（存放日志文件）并且在里面新建文件<code>mongodb.log</code><br>2:在E:\mongodb中新建文件mongo.config,用记事本打开并在mongo.config中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dbpath=E:\mongodb\data </div><div class="line">logpath=E:\mongodb\log\mongo.log</div></pre></td></tr></table></figure></p>
<p>dppath 代表数据库存放路径<br>logpath 代表日志存放路径<br>如图<br><img src="http://onzmxf7ol.bkt.clouddn.com/mongodb3.png" alt="配置window服务"></p>
<p>重点来了<br>**<br>以管理员身份运行cmd命令行,记得一定要用管理员身份运行,不然会出问题，右击以管理员身份运行,进入E:\mongodb\bin目录，如果你此时在c盘下可以输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd E:\MongoDB\bin</div></pre></td></tr></table></figure></p>
<p>你会发现并没切换到E盘 再次输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E:</div></pre></td></tr></table></figure></p>
<p>就可以切换到 E:\MongoDB\bin 目录下<br>输入如下的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config E:\mongodb\mongo.config --install --serviceName &quot;MongoDB&quot;</div></pre></td></tr></table></figure></p>
<p>如果输出了日期，代表成功了，没输入可以重复上面命令，或者你没用管理员身份运行</p>
<p>打开cmd输入services.msc查看服务找到MongoDB服务，点击启动即可，至此你就成功安装了mongodb并且开机自动启动<br><img src="http://onzmxf7ol.bkt.clouddn.com/mongodb4.png" alt="配置window服务"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近要用 mongodb+node.js+vue2做一个小demo,所以第一步应该是先安装好mongodb,本以为是十分简单的安装,却踩了不少坑。&lt;/p&gt;
&lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;先到官网下载mongodb &lt;a href=&quot;https://www.mongodb.com/download-center?jmp=nav#community&quot;&gt;点击到官网&lt;/a&gt; 选择合适自己的版本,我用的是window 所以下的window版本,此时的mongodb版本为3.4&lt;br&gt;
    
    </summary>
    
      <category term="node.js" scheme="http://yucccc.com/categories/node-js/"/>
    
    
      <category term="mongodb" scheme="http://yucccc.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>VueX在ie,safari浏览器无法解析的解决方法</title>
    <link href="http://yucccc.com/2017/04/08/VueX%E5%9C%A8ie-safari%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E8%A7%A3%E6%9E%90%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yucccc.com/2017/04/08/VueX在ie-safari浏览器无法解析的解决方法/</id>
    <published>2017-04-08T11:27:19.000Z</published>
    <updated>2017-04-08T11:31:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做一个vue2项目时,引入了vuex做一些状态管理，结果调试发现在ie11以下页面显示不出来，打开控制台发现出现如下错误：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4378038-dbbb398beeab58dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ie不支持vuex.png"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[vuex] vuex requires a <span class="built_in">Promise</span> polyfill <span class="keyword">in</span> <span class="keyword">this</span> browser.</div></pre></td></tr></table></figure>
<p>意思为vuex需要在这个浏览器上解析不了  因为vuex基于promise, IE浏览器没有内置Promise对象那么此时我们需要一个解析promise ES6语法的东西。不仅如此，几乎所有的ES6新增的方法在IE都不能用，比如Array.from。因为babel<br>只会转译语法，并不会新增方法。此时你需要<a href="https://babeljs.io/docs/usage/polyfill/" target="_blank" rel="external">babel Polyfill</a> </p>
<h2 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h2><p>polyfill是一种js库，为低版本的js环境补足高版本js里定义的一些原生功能</p>
<p>用法十分简单如下：<br>1：下载<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save babel-polyfill</div></pre></td></tr></table></figure></p>
<p>2 :<br>方法一 ：在main.js最顶部加入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span>  <span class="string">'babel-polyfill'</span>;<span class="comment">//解决ie浏览器不支持promise</span></div></pre></td></tr></table></figure></p>
<p>方法二：或者在webpack中加入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// entry: &#123; // 这是原本脚手架配置的 </span></div><div class="line">  <span class="comment">//   app: './src/main.js'</span></div><div class="line">  <span class="comment">// &#125;,</span></div><div class="line">  entry: &#123; <span class="comment">// 替换成 </span></div><div class="line">    app: [<span class="string">'babel-polyfill'</span>,<span class="string">'./src/main.js'</span>]</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种需要重新npm run dev 因为更改了webpack的配置<br>两种加入方法都可以解决，个人建议第一种方便快捷，此时重新打开浏览器项目就能正常解析了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在做一个vue2项目时,引入了vuex做一些状态管理，结果调试发现在ie11以下页面显示不出来，打开控制台发现出现如下错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4378038-d
    
    </summary>
    
      <category term="vue2" scheme="http://yucccc.com/categories/vue2/"/>
    
    
      <category term="webpack" scheme="http://yucccc.com/tags/webpack/"/>
    
      <category term="vuex" scheme="http://yucccc.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vue2中注册在router-link上事件无效解决方法</title>
    <link href="http://yucccc.com/2017/04/06/Vue2%E4%B8%AD%E6%B3%A8%E5%86%8C%E5%9C%A8router-link%E4%B8%8A%E4%BA%8B%E4%BB%B6%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yucccc.com/2017/04/06/Vue2中注册在router-link上事件无效解决方法/</id>
    <published>2017-04-06T12:16:42.000Z</published>
    <updated>2017-04-06T12:41:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天用vue在做一个tab栏切换的时候，偶然发现我绑定在router-link上的click并不会触发，<br>后来测试发现，所有绑定在router-link中的事件都不会促发<br>此后查看了官方的文档，也并没有给出明确的说明：<br>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link @click=<span class="string">"change"</span>&gt;&lt;span&gt;&#123;&#123;item.text&#125;&#125;&lt;/span&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure>
<p>此刻我发现，无论如何定义在methods 中的 change函数并不会触发，这是为什么呢？<br>在github查看了vue-router的代码后发现：<br><img src="http://onzmxf7ol.bkt.clouddn.com/20170406routetlink.jpg" alt="vue-router源码"></p>
<h3 id="事件被阻止"><a href="#事件被阻止" class="headerlink" title="事件被阻止"></a>事件被阻止</h3><p>如果当前router-link的tag不是a的话（官方文档中说明：默认为a，可以通过tag改变渲染后的标签），那么就会往自己的子元素（组件）找，找到的第一个就会把一些属性及时间覆盖过去。<br>所以此时事件是被阻止了。个人看法：因为router-link的作用是单纯的路由跳转，如果不阻止事件的话，也许会有很多坑，所以作者干脆阻止了其他事件的触发</p>
<h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link  @click.native=<span class="string">"change"</span>&gt;&lt;span&gt;&#123;&#123;item.text&#125;&#125;&lt;/span&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure>
<p>只需要在@click后面加上native就可以了</p>
<h3 id="原生事件"><a href="#原生事件" class="headerlink" title="原生事件"></a>原生事件</h3><p>添加native事件修饰符之后变为原生事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$element.addEventListener(click, callback);</div></pre></td></tr></table></figure></p>
<p>此时a标签并不会阻止，至此便可以解决绑定在router-link身上的事件不会触发的问题。<br>其次，想要实现tab切换添加class可以在router中添加如下配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">  <span class="attr">routes</span>: [],<span class="comment">// 路由跳转配置</span></div><div class="line">  linkActiveClass:<span class="string">'active'</span> <span class="comment">// 在路由中添加配置  active 为跳转到该路由时添加的激活类名</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天用vue在做一个tab栏切换的时候，偶然发现我绑定在router-link上的click并不会触发，&lt;br&gt;后来测试发现，所有绑定在router-link中的事件都不会促发&lt;br&gt;此后查看了官方的文档，也并没有给出明确的说明：&lt;br&gt;代码如下：&lt;/p&gt;
&lt;figure 
    
    </summary>
    
      <category term="vue2" scheme="http://yucccc.com/categories/vue2/"/>
    
    
      <category term="vue2" scheme="http://yucccc.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>vue2搭建开发环境并且可以请求本地数据设置</title>
    <link href="http://yucccc.com/2017/04/04/vue2%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%B9%B6%E4%B8%94%E5%8F%AF%E4%BB%A5%E8%AF%B7%E6%B1%82%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yucccc.com/2017/04/04/vue2搭建开发环境并且可以请求本地数据设置/</id>
    <published>2017-04-04T01:58:34.000Z</published>
    <updated>2017-04-08T11:34:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>  这一个问题困扰了我许久，怎么用vue搭建开发环境并且可以请求本地数据，因为webpack-dev-server在编译vue的时候会默认开启一个端口，本地的服务器肯定也会拥有一个端口，那么不同端口的请求又为跨域请求，此时又不能把端口改为相同，因为这样会造成端口冲突，当然不考虑跨域jsonp之类，虽然jsonp可以做，但是在开发中无疑增加了繁杂度，并且这样做的话上线又要改请求方式，十分麻烦，那么应该怎么做呢？<br>这时候就要用到webpack里面的开启代理的配置,即把请求的地址转发到指定的地址，并且允许跨域请求 如下：</p>
<h2 id="开启webpack代理"><a href="#开启webpack代理" class="headerlink" title="开启webpack代理"></a>开启webpack代理</h2><p>此时找到config文件中的index.js,拉到底部找到<br>dev：{  里面是一些端口的配置} 在里面添加上如下配置<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> dev: &#123;</div><div class="line">    <span class="attr">env</span>: <span class="built_in">require</span>(<span class="string">'./dev.env'</span>),</div><div class="line">    <span class="attr">port</span>: <span class="number">9999</span>,</div><div class="line">    <span class="attr">autoOpenBrowser</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">assetsSubDirectory</span>: <span class="string">'static'</span>,</div><div class="line">    <span class="attr">assetsPublicPath</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">proxyTable</span>: &#123;<span class="comment">// 这里用的是vue-cli脚手架,默认proxyTable:&#123;&#125; ,内容为空 只需要配置这个参数即可</span></div><div class="line">      <span class="string">'/webapi'</span>: &#123;<span class="comment">//代表你以什么为开始请求数据 表示以webapi开头的请求就开启代理</span></div><div class="line">        target: <span class="string">'http://im.ivymei.com'</span>, <span class="comment">//代表代理地址 即：如果 this.$http.get('/webapi').then() 此时会变成http://www.baidu.com/webapi</span></div><div class="line">        changeOrigin: <span class="literal">true</span>,<span class="comment">// 表示允许跨域   </span></div><div class="line">        pathRewrite: &#123;</div><div class="line">          <span class="string">'^/webapi'</span>: <span class="string">'/webapi'</span> <span class="comment">//可要可不要</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">cssSourceMap</span>: <span class="literal">false</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此就可以愉快的请求本地数据了  8080端口也能请求80端口的数据了 最终打包上线也不需要改任何代码,更多的webpack代理设置请查阅webpack官方文档</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  这一个问题困扰了我许久，怎么用vue搭建开发环境并且可以请求本地数据，因为webpack-dev-server在编译vue的时候会默认开启一个端口，本地的服务器肯定也会拥有一个端口，那么不同端口的请求又为跨域请求，此时又不能把端口改为相同，因为这样会造成端口冲突，当然不
    
    </summary>
    
      <category term="webpack" scheme="http://yucccc.com/categories/webpack/"/>
    
    
      <category term="vue2" scheme="http://yucccc.com/tags/vue2/"/>
    
      <category term="webpack" scheme="http://yucccc.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>javascript常见的表单输入限制方法代码</title>
    <link href="http://yucccc.com/2016/04/22/javascript%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E9%99%90%E5%88%B6%E6%96%B9%E6%B3%95%E4%BB%A3%E7%A0%81/"/>
    <id>http://yucccc.com/2016/04/22/javascript常见的表单输入限制方法代码/</id>
    <published>2016-04-22T04:36:07.000Z</published>
    <updated>2017-04-20T14:45:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期公司在做一个后台管理系统,各种要限制输入,网上资料虽有，但是比较散乱，个人收集一些常用的表单限制代码</p>
<p>1.文本框只能输入数字代码(小数点也不能输入)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"this.value=this.value.replace(/\D/g,'')"</span> <span class="attr">onafterpaste</span>=<span class="string">"this.value=this.value.replace(/\D/g,'')"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.只能输入数字,能输小数点<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"if(isNaN(value))execCommand('undo')"</span> <span class="attr">onafterpaste</span>=<span class="string">"if(isNaN(value))execCommand('undo')"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onchange</span>=<span class="string">"if(/\D/.test(this.value))&#123;alert('只能输入数字');this.value='';&#125;"</span> <span class="attr">name</span>=<span class="string">txt1</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.只能输入字母和汉字<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[\d]/g,'') "</span><span class="attr">onbeforepaste</span>=<span class="string">"clipboardData.setData('text',clipboardData.getData('text').replace(/[\d]/g,''))"</span> <span class="attr">maxlength</span>=<span class="string">10</span> <span class="attr">name</span>=<span class="string">"Numbers"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>4.只能输入英文字母和数字,不能输入中文<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[^\w\.\/]/ig,'')"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>5.只能输入数字和英文<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onKeyUp</span>=<span class="string">"value=value.replace(/[^\d|chun]/g,'')"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>6.小数点后只能有最多两位(数字,中文都可输入),不能输入字母和运算符号<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onKeyPress</span>=<span class="string">"if((event.keyCode&lt;48 || event.keyCode&gt;57) &amp;&amp; event.keyCode!=46 || /\.\d\d$/.test(value))event.returnValue=false"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>7.小数点后只能有最多两位(数字,字母,中文都可输入),可以输入运算符号<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"this.value=this.value.replace(/^(\-)*(\d+)\.(\d\d).*$/,'$1$2.$3')"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>8.只能输入中文：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"realname"</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">maxlength</span>=<span class="string">"20"</span> <span class="attr">class</span>=<span class="string">"input_style"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[^\u4E00-\u9FA5]/g,'')"</span> <span class="attr">onbeforepaste</span>=<span class="string">"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\u4E00-\u9FA5]/g,''))"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期公司在做一个后台管理系统,各种要限制输入,网上资料虽有，但是比较散乱，个人收集一些常用的表单限制代码&lt;/p&gt;
&lt;p&gt;1.文本框只能输入数字代码(小数点也不能输入)&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
      <category term="javascript" scheme="http://yucccc.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yucccc.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>限制H5 date日期控件所选日期不能晚于当前日期</title>
    <link href="http://yucccc.com/2016/04/10/%E9%99%90%E5%88%B6H5inputtype-date%E6%97%A5%E6%9C%9F%E6%8E%A7%E4%BB%B6%E6%89%80%E9%80%89%E6%97%A5%E6%9C%9F%E4%B8%8D%E8%83%BD%E6%99%9A%E4%BA%8E%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F/"/>
    <id>http://yucccc.com/2016/04/10/限制H5inputtype-date日期控件所选日期不能晚于当前日期/</id>
    <published>2016-04-10T14:07:11.000Z</published>
    <updated>2017-04-20T14:25:29.022Z</updated>
    
    <content type="html"><![CDATA[<p>道理其实很简单 只需要限制 max = ‘当前日期即可’</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">max</span>=<span class="string">"当前日期"</span> <span class="attr">class</span>=<span class="string">'limit-max-date'</span>&gt;</span></div></pre></td></tr></table></figure>
<p>那么只需要动态设置max值即可 一定要遵循 YYYY-MM-DD</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取input </span></div><div class="line"><span class="keyword">var</span> input1 = <span class="built_in">document</span>.querySelector(<span class="string">'.limit-max-date'</span>);</div><div class="line"><span class="comment">// 获取当前日期</span></div><div class="line"><span class="keyword">var</span> tDate  = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="keyword">var</span> seperator1 = <span class="string">"-"</span>;</div><div class="line">    <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;<span class="comment">//月</span></div><div class="line">    <span class="keyword">var</span> strDate = date.getDate();<span class="comment">//日</span></div><div class="line">    <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">9</span>) &#123;</div><div class="line">        month = <span class="string">"0"</span> + month;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (strDate &gt;= <span class="number">0</span> &amp;&amp; strDate &lt;= <span class="number">9</span>) &#123;</div><div class="line">        strDate = <span class="string">"0"</span> + strDate;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> date.getFullYear() + seperator1 + month + seperator1 + strDate</div><div class="line"></div><div class="line">&#125;)()</div><div class="line">input1.setAttribute(<span class="string">'max'</span>,tDate)<span class="comment">// 设置max值为当前日期</span></div></pre></td></tr></table></figure>
<p>至此就不能选择比今天更晚的日期,一般用于选择生日时间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;道理其实很简单 只需要限制 max = ‘当前日期即可’&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
    
    </summary>
    
      <category term="javascript" scheme="http://yucccc.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yucccc.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现jQuery中的type检测数据类型</title>
    <link href="http://yucccc.com/2016/03/20/JavaScript%E5%AE%9E%E7%8E%B0jQuery%E4%B8%AD%E7%9A%84type%E6%A3%80%E6%B5%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yucccc.com/2016/03/20/JavaScript实现jQuery中的type检测数据类型/</id>
    <published>2016-03-20T14:30:10.000Z</published>
    <updated>2017-04-13T14:35:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，JavaScript中的typeof虽然可以检测数据类型，但是在检测数据类型的时候,返回的数据类型不一定准确:比如 null 也会返回null ，返回的数据类型只有下面几种，远远不能准确的判断属于何种数据类型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"undefined"</span> ——如果这个值未定义；</div><div class="line"><span class="string">"boolean"</span> ——如果这个值是布尔值；</div><div class="line"><span class="string">"string"</span> ——如果这个值是字符串；</div><div class="line"> <span class="string">"number"</span> ——如果这个值是数值；</div><div class="line"><span class="string">"object"</span> ——如果这个值是对象或 <span class="literal">null</span> ；</div><div class="line"><span class="string">"function"</span> ——如果这个值是函数。</div></pre></td></tr></table></figure></p>
<p>在网上也看了一些所谓的全面的检测方法，也没有很好的实现封装。无聊之余看了下jQuery的type实现方法，现在我用JavaScript实现一下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个对象保存所有的数据类型</span></div><div class="line">    <span class="keyword">var</span> class2type = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> dataType = <span class="string">"Boolean Number String Function Array Date RegExp Object Error Symbol"</span>.split(<span class="string">" "</span>);</div><div class="line">    <span class="comment">//把所有的数据类型遍历进class2type里面 jQuery中用的是自己封装的each  forEach() 是es5新增的方法</span></div><div class="line">    dataType.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name, i</span>) </span>&#123;</div><div class="line">        class2type[<span class="string">"[object "</span> + name + <span class="string">"]"</span>] = name.toLowerCase();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> type = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123; <span class="comment">// 当等于undefined 或者 null 直接返回 </span></div><div class="line">            <span class="keyword">return</span> obj + <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"object"</span> || <span class="keyword">typeof</span> obj === <span class="string">"function"</span> ?</div><div class="line">            class2type[toString.call(obj)] || <span class="string">"object"</span> :</div><div class="line">            <span class="keyword">typeof</span> obj;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>至此便可以检测JavaScript中的所有数据类型了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，JavaScript中的typeof虽然可以检测数据类型，但是在检测数据类型的时候,返回的数据类型不一定准确:比如 null 也会返回null ，返回的数据类型只有下面几种，远远不能准确的判断属于何种数据类型。&lt;br&gt;&lt;figure class=&quot;highligh
    
    </summary>
    
      <category term="javascript" scheme="http://yucccc.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yucccc.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>读高程有感之JavaScript代码可维护性</title>
    <link href="http://yucccc.com/2016/03/18/%E8%AF%BB%E9%AB%98%E7%A8%8B%E6%9C%89%E6%84%9F%E4%B9%8BJavaScript%E4%BB%A3%E7%A0%81%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7/"/>
    <id>http://yucccc.com/2016/03/18/读高程有感之JavaScript代码可维护性/</id>
    <published>2016-03-18T07:35:28.000Z</published>
    <updated>2017-04-10T14:22:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期一直在研读高级程序设计一书，其中第二十四章《最佳实践》中提到代码的可维护性，其中本人深有感触。</p>
<h2 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h2><p>在从事IT编程工作一段时间后发现，每进一家新公司，都要花大量的时间去研读别人的代码，其余剩下的大量时间都是维护别人的代码，由于编程人员水平的参差不齐，所有经常在看上一个同事代码的时候也很难抑制内心的冲动，这写的什么鬼，一句注释没有，重复的代码这么多也不封装，所以编写可维护性的代码尤为重要，并且我觉得一个程序员一开始就应该先养成良好的代码习惯，做到像写诗一样写代码，从而能力才能更进一步，在我认为，代码风格都不好，其他一切都是空谈。</p>
<h2 id="什么是可维护的代码"><a href="#什么是可维护的代码" class="headerlink" title="什么是可维护的代码"></a>什么是可维护的代码</h2><p>可维护的代码有一些特征。一般来说，如果说代码是可维护的，它需要遵循以下特点。<br>1、可理解性——其他人可以接手代码并理解它的意图和一般途径，而无需原开发人员的完整解释。<br>2、直观性——代码中的东西一看就能明白，不管其操作过程多么复杂。<br>3、可适应性——代码以一种数据上的变化不要求完全重写的方法撰写。<br>4、可扩展性——在代码架构上已考虑到在未来允许对核心功能进行扩展。<br>5、可调试性——当有地方出错时，代码可以给予你足够的信息来尽可能直接地确定问题所在。<br>对于专业人士而言，能写出可维护的 JavaScript 代码是非常重要的技能。</p>
<h2 id="代码的约定"><a href="#代码的约定" class="headerlink" title="代码的约定"></a>代码的约定</h2><p>绝大多数语言都有各自的代码约定，只要在网上一搜就能找到大量相关文档。由于 JavaScript 的可适应性，代码约定对它也很重要。这里建议大家有空经常到github上看一下别人的开源代码，会有意想不到的收获及思路。</p>
<h3 id="1-可读性"><a href="#1-可读性" class="headerlink" title="1. 可读性"></a>1. 可读性</h3><p>可读性与代码作为文本文件的格式化方式有关。当所有人都使用一样的缩进方式时，整个项目中的代码都会更加易于阅读。目前许多框架都提供了这么一个检测代码的插件，eslint也是一个不错的练习，如vue-cli在构建项目时也会问你是否开启eslint，个人觉得是个不错的养成代码良好风格的练习方式</p>
<h3 id="2-多写注释"><a href="#2-多写注释" class="headerlink" title="2. 多写注释"></a>2. 多写注释</h3><p>很多时候我上个星期写的代码，这个星期就不记得了，所有多写注释十分重要</p>
<h3 id="3-变量名和函数名"><a href="#3-变量名和函数名" class="headerlink" title="3. 变量名和函数名"></a>3. 变量名和函数名</h3><p> 变量名应为名词 如 car 或 person<br> 函数名应该以动词开始，如 getName()<br> 返回布尔类型值的函数一般以 is 开头，如 isEnable() 。<br> 变量和函数都应使用合乎逻辑的名字，不用担心长度。因为最终在生产环境下代码可以被压缩打包，例如webpack和gulp都提供了这些功能。</p>
<h3 id="4-变量类型透明"><a href="#4-变量类型透明" class="headerlink" title="4. 变量类型透明"></a>4. 变量类型透明</h3><p>由于在 JavaScript 中变量是松散类型的，很容易就忘记变量所应包含的数据类型。合适的命名方式<br>可以一定程度上缓解这个问题，但放到所有的情况下看，还不够。有三种表示变量数据类型的方式。<br>//第一种方式：通过初始化指定变量类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> found = <span class="literal">false</span>; <span class="comment">//布尔型</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">-1</span>; <span class="comment">//数字</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">""</span>; <span class="comment">//字符串</span></div><div class="line"><span class="keyword">var</span> person = <span class="literal">null</span>; <span class="comment">//对象</span></div></pre></td></tr></table></figure></p>
<p>初始化为一个特定的数据类型可以很好的指明变量的类型。但缺点是它无法用于函数声明中的函数参数。<br>//第二种方法：用指定数据类型的匈牙利标记法，这个标记法在脚本语言中很流行，曾经很长时间也是 JavaScript 所推崇的方式，”o” 代表对象， “s” 代表字符串， “i”<br>代表整数， “f” 代表浮点数， “b” 代表布尔型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bFound; <span class="comment">//布尔型</span></div><div class="line"><span class="keyword">var</span> iCount; <span class="comment">//整数</span></div><div class="line"><span class="keyword">var</span> sName; <span class="comment">//字符串</span></div><div class="line"><span class="keyword">var</span> oPerson; <span class="comment">//对象</span></div></pre></td></tr></table></figure></p>
<p>JavaScript 中用匈牙利标记法的好处是函数参数一样可以使用。但它的缺点是让代码某种程度上难以阅读，阻碍了没有用它时代码的直观性和句子式的特质。因此，匈牙利标记法失去了一些开发者的宠爱。<br>//第三种方法：用于指定类型的类型注释 类型注释放在变量名右边，但是在初始化前面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> found <span class="comment">/*:Boolean*/</span> = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> count <span class="comment">/*:int*/</span> = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> name <span class="comment">/*:String*/</span> = <span class="string">"Nicholas"</span>;</div><div class="line"><span class="keyword">var</span> person <span class="comment">/*:Object*/</span> = <span class="literal">null</span>;</div></pre></td></tr></table></figure></p>
<p>类型注释维持了代码的整体可读性，同时注入了类型信息。类型注释的缺点是你不能用多行注释一次注释大块的代码，因为类型注释也是多行注释，两者会冲突 。<br>这三种常见指定变量数据类型的方法。每种都有各自的优势和劣势，要自己在使用之前进<br>行评估。最重要的是要确定哪种最适合你的项目并一致使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期一直在研读高级程序设计一书，其中第二十四章《最佳实践》中提到代码的可维护性，其中本人深有感触。&lt;/p&gt;
&lt;h2 id=&quot;可维护性&quot;&gt;&lt;a href=&quot;#可维护性&quot; class=&quot;headerlink&quot; title=&quot;可维护性&quot;&gt;&lt;/a&gt;可维护性&lt;/h2&gt;&lt;p&gt;在从事IT
    
    </summary>
    
      <category term="javascript" scheme="http://yucccc.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yucccc.com/tags/javascript/"/>
    
  </entry>
  
</feed>
